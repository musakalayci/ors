/*dahili merkez::bellek: bellek;
dahili merkez::c::stdio;
dahili merkez::c::stdarg; 
dahili merkez::iletişim; 
dahili merkez::dizi::zincir; 
dahili merkez::dizi::zincir::örnek;
dahili merkez::dizi::yığın::örnek: öö;
dahili merkez::küme::örnek: küme;
dahili merkez::küme::sözlük::örnek: sözlük;
*/

yaban iş printf bicim *t8,  _argumanlar ... : tam;
iş Yazı 
{
  printf('ikili oldu mu ???\n');
}

iş Yazı1
{
  printf('üçlü yazı1 oldu mu ???\n');
}

tür ikili 
{
  a tam; 
  b tam; 
  İşlem *(:);
}

iş Giriş argümanSayısı tam, _argümanlar **t8 : tam 
{
  //değer üc üç; 
  //üc.Yapılandır(10); 
  //üc.Yazdır(); 
  //örnek::Başlat();
  //test();
  //değer k *FILE; 
  /*bellek::örnek::Başlat(); 
  küme::Başlat();
  fprintf(Çıktı, 'sanalfprintiftoplama %d + %d = %s\n', a, b, 
    Metin._harfler);*/ 
  değer K *(:) = Yazı;
  değer A *(:) = boş;
  K();
  değer ikili ikili; 
  ikili.a = 11; 
  ikili.b = 22;
  ikili.İşlem = Yazı;
  ikili.İşlem(); 

  değer üçlü ikili; 
  üçlü.a = 33; 
  üçlü.b = 44;
  üçlü.İşlem = Yazı1;
  //üçlü.İşlem();

  değer İki *ikili = &ikili; 
  değer Üç  *ikili = &üçlü;
  printf('-> %p: [%d, %d], %p: [%d, %d]\n', İki, İki->a, İki->b, Üç, Üç->a, Üç->b);
  İki    <-> Üç;
  İki->a <-> İki->b;
  Üç->a  <-> Üç->b;
  //Üç->İşlem <->İki->İşlem;
  /*
  kontrol edilecek eşitlikler Konum && Konum
  */
  printf('-> %p: [%d, %d], %p: [%d, %d]\n', İki, İki->a, İki->b, Üç, Üç->a, Üç->b);
  İki->İşlem();
  Üç->İşlem();
  //.Yaz("çizelge:\n"); 
  //sıradaki a <- b ve a <=>b, 
  //sözlük::Başlat(); 
  //merkez::yol::örnek::Başlat();
  dön sonuç;
} 

/*

cıvata listesi: 
https://www.civatasomun.com

gergi için M6x150 x 16 adet *
gergi için M6 kör somun x 20 adet *

dik mil tutucular için M6*55 x 20 adet

mil tutucular için M5x60 X 20 adet 
mil tutucular için flanşlı somun M5 X 25 adet

yedek flanşlı somun M6 X 20 adet

50 adet M6 pul 

30 adet konumlandırma için M6 X 16mm X 30 adet


Metin metin 
bağımsız küresel iş Yeni hacim t32: *metin 
{
  hacim;
  tamlanmış := <d64>hacim + (@mimari - (<d64>hacim % @mimari));
  toplam := tamlanmış + @metin;
  Gelen := temiz(t8[toplam]);
  //c::stdio::printf('toplam: %d, hacim: %d, tamlanmış %d\n', toplam, hacim, tamlanmış); 
  sonuç = <*metin>Gelen;
  sonuç->hacim = <tam>tamlanmış;
  sonuç->boyut = 0;
  sonuç->_harfler = &Gelen[@metin];
  dön sonuç;
}

sanal iş _dboyut Sol *metin, Sağ *metin : tam 
{
  dön (seç Sol->hacim > Sağ->hacim: 
    hayır: Sol->hacim/<%Sol->hacim>(@mimari), 
    varsayılan: Sağ->hacim/<%Sol->hacim>(@mimari)); 
}

Metin metin 
bağımsız küresel 
iş Metinden Girdi *metin: *metin 
{
  Yeni := metin::Yeni(Girdi->boyut);
  _harfler := &Girdi->_harfler[0];
  geçir(&Yeni->_harfler[0], _harfler, Girdi->boyut); 
  Yeni->boyut = Girdi->boyut; 
  //stdio::printf('-?? %s, %s\n', Yeni->_harfler, _harfler);
  dön Yeni;
}

*/