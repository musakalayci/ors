tür ikili 
{
  x tam; 
  y tam; 
} 
/*
İki *ikili 
iş Yazdır
{
  printf('x = %d, y = %d', İki->x, İki->y);
}*/

tür üç 
{
  ilk    tam;
  ikinci tam; 
  üçüncü ikili;
  dördüncü ikili;
  int tam[4, 4];
}

yaban iş printf 
  _biçim *t8, _argümanlar ...: tam;



/*
iş test 
{
  değer aa tam[4, 3] = [
    [1, 2, 3, 4],
    [1, 44, 3, 4], 
    [1, 2, 55, 4],
    [1, 2, 388, 4]];

  her i := 0; i < 4; i++: 
  {
    printf('-> ');
    her j := 0; j < 3; j++: 
    {
      printf('%d, ', aa[i, j]);
    }
    printf('\n');
  }

  // Ekstra kontrol için
  printf("Dizi boyutu: %d x %d\n", 4, 3);

  // Dizi elemanlarını toplama
  değer toplam tam = 0;
  her i := 0; i < 4; i++: 
  {
    her j := 0; j < 3; j++: 
    {
      toplam += aa[i, j];
    }
  }
  printf("Dizi elemanlarının toplamı: %d\n", toplam);
}
*/
/*
Üç *üç 
iş Yazdır a tam, b tam
{

  printf('ilk: %d,\nikinci : %d\n', Üç->ilk, Üç->ikinci);
  printf('üçüncü: '); 
  Üç->üçüncü.Yazdır();
  printf('\ndördüncü: '); 
  Üç->dördüncü.Yazdır(); 
  printf('\n');
  her i := 0; i < 4; i++: 
  {
    printf('-> ');
    her j := 0; j < 4; j++: 
    {
      printf('%d, ', Üç->int[i, j]);
    }
    printf('\n');
  }
  printf('a: %d, b : %d\n', a, b);
}*/

tür yalın üç; 

iş yalınDeneme 
{
  değer a yalın = {
    int = [
    [1, 2, 3, 4],
    [1, 44, 3, 4], 
    [1, 2, 55, 4],
    [1, 2, 388, 4]],
    ilk = 11,
    ikinci = 22,
    üçüncü = {x = 31, y = 32},
    dördüncü = {x = 41, y = 42}
  }; 
  //a.Yazdır(100, 400);
}

sanal tür k x
{
  boyut    tam; 
  hacim    tam;
  Nesneler *x; 
}

sanal tür zincirKökü x 
{
  Öz      x;
  Önceki  *zincirKökü'x; 
  Sonraki *zincirKökü'x;
}

sanal tür tt y
{
  boyut t32;
  Baş *zincirKökü'y; 
  Son *zincirKökü'y;
}

tür üçler k'*üç; 
tür zincirler tt'*üç;

sanal tür ab x 
{
  a x; 
  b x;
}

Ab *ab'x 
sanal iş Yapılandır a tam, b tam 
{
  Ab->a = a; 
  Ab->b = b;
  her i := 0; i < 10; i++: 
  {
    Ab->a++;
    Ab->b++;
  }
}

Ab *ab'x 
sanal iş Çarp a tam, b tam: tam 
{
  dön Ab->a * Ab->b;
}

Ab *ab'x 
sanal iş Topla a tam, b tam : tam 
{
  dön Ab.Çarp(a, b) + Ab->b;
}


uygulamalı tür abd ab'tam;

iş Giriş argümanSayısı tam, _argümanlar **t8 : tam 
{
  değer Abd abd;
  a := 12; 
  b := 13; 
  Abd.Yapılandır(a, b);
  t := Abd.Çarp(a, b); 
  printf('toplama %d + %d = %d\n', Abd.a, Abd.b, t);
  dön sonuç;
}