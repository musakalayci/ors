dahili merkez::bellek: bellek;
dahili merkez::c::stdio;
dahili merkez::c::stdarg; 
dahili merkez::iletişim; 
dahili merkez::dizi::zincir; 
dahili merkez::dizi::zincir::örnek;
dahili merkez::dizi::yığın::örnek: öö;
dahili merkez::küme::örnek: küme;
dahili merkez::küme::çizelge::örnek: çizelge;
/*
tür ikili 
{
  x tam; 
  y tam; 
} 

İki *ikili 
iş Yazdır
{
  printf('x = %d, y = %d', İki->x, İki->y);
}

tür üç 
{
  ilk    tam;
  ikinci tam; 
  üçüncü ikili;
  dördüncü ikili;
  int tam[4, 4];
}



iş test 
{
  değer aa tam[4, 3] = [
    [1, 2, 3, 4],
    [1, 44, 3, 4], 
    [1, 2, 55, 4],
    [1, 2, 388, 4]];

  her i := 0; i < 4; i++: 
  {
    printf('-> ');
    her j := 0; j < 3; j++: 
    {
      printf('%d, ', aa[i, j]);
    }
    printf('\n');
  }

  // Ekstra kontrol için
  printf('Dizi boyutu: %d x %d\n', 4, 3);

  // Dizi elemanlarını toplama
  değer toplam tam = 0;
  her i := 0; i < 4; i++: 
  {
    her j := 0; j < 3; j++: 
    {
      toplam += aa[i, j];
    }
  }
  printf('Dizi elemanlarının toplamı: %d\n', toplam);
}


Üç *üç 
iş Yazdır a tam, b tam
{

  printf('ilk: %d,\nikinci : %d\n', Üç->ilk, Üç->ikinci);
  printf('üçüncü: '); 
  Üç->üçüncü.Yazdır();
  printf('\ndördüncü: '); 
  Üç->dördüncü.Yazdır(); 
  printf('\n');
  her i := 0; i < 4; i++: 
  {
    printf('-> ');
    her j := 0; j < 4; j++: 
    {
      printf('%d, ', Üç->int[i, j]);
    }
    printf('\n');
  }
  printf('a: %d, b : %d\n', a, b);
}

tür yalın üç; 

iş yalınDeneme 
{
  değer a yalın = {
    int = [
    [1, 2, 3, 4],
    [1, 44, 3, 4], 
    [1, 2, 55, 4],
    [1, 2, 388, 4]],
    ilk = 11,
    ikinci = 22,
    üçüncü = {x = 31, y = 32},
    dördüncü = {x = 41, y = 42}
  }; 
  //a.Yazdır(100, 400);
}

sanal tür k x
{
  boyut    tam; 
  hacim    tam;
  Nesneler *x; 
}

sanal tür zincirKökü x 
{
  Öz      x;
  Önceki  *zincirKökü'x; 
  Sonraki *zincirKökü'x;
}

sanal tür tt y
{
  boyut t32;
  Baş *zincirKökü'y; 
  Son *zincirKökü'y;
}

tür üçler k'*üç; 
tür zincirler tt'*üç;

sanal tür ab x 
{
  a x; 
  b x;
}

Ab *ab'x 
sade sanal iş Yapılandır a tam, b tam 
{sanal tür k x
  {
    sıra  tam; 
    fark  tam;
    _veri x;
  }

öz k'x
sade sanal iş Sıfırla 
{
  öz.sıra = 0_st32; 
  öz._veri[0] = 0_st8;
}  i++:
  {
    Ab->a++;
    Ab->b++;
  }
}

Ab *ab'x 
sanal iş Çarp a tam, b tam: tam 
{
  dön Ab->a * Ab->b;
}

Ab *ab'x 
sanal iş Topla a tam, b tam : tam 
{
  dön Ab.Çarp(a, b) + Ab->b;
}


tür abd ab'tam;

ortak tür or 
{
  musa tam[17];
  Abd *abd;
}
yaban iş atexit Islem *(:) : tam; 
iş yaz a tam, b tam: tam 
{
  sonuç = a+b;
  printf('oldu !!! %d\n', sonuç);
  dön sonuç;
}

yaban tür FILE; */


/*yaban iş printf 
  _biçim *t8, 
  _argümanlar ...: tam; 

sanal değer E o64 = 2.7182818284590452354;




yaban iş fprintf 
  Belge *FILE,
  _biçim *t8, 
  _argümanlar ...: tam; */
/*
değer Metin metin = "moseschrist";
yaban tür va_list; 
bünye iş va_start Argüman şey;
bünye iş va_end Argüman şey; 
bünye iş va_copy Hedef şey, Kaynak şey;  

yaban iş vfprintf Belge *FILE, _biçim *t8, _argumanlar ...: tam;*/
/*
tür ikili 
{
  x tam; 
  y tam; 
} 

İki *ikili 
iş Yazdır
{
  .printf('x = %d, y = %d\n', İki->x, İki->y);
}

İki *ikili 
iş Yapılandır i tam  
{
  İki->x = i; 
  İki->y = i +1;
}

tür üç 
{
  ilk    tam;
  ikinci tam; 
  üçüncü ikili;
  dördüncü ikili;
  int tam[4, 4];
}

Üç *üç 
iş Yazdır 
{
  .printf('ilk    : %d\n', Üç->ilk);
  .printf('ikinci : %d\n', Üç->ikinci); 
  Üç->üçüncü.Yazdır(); 
  Üç->dördüncü.Yazdır(); 
}

Üç *üç  
iş Yapılandır i tam 
{
  Üç->ilk = i; 
  Üç->ikinci = i + 1; 
  Üç->üçüncü.Yapılandır(i+2);
  Üç->dördüncü.Yapılandır(i+3);
}

uygulamalı tür üçler zincir::k'*üç;
*/


  küresel iş Çıkar no d32
  {
    a := &no; 
    a = boş; 
    değer b tam; 
    b = boş;
    dön;
  }

iş Giriş argümanSayısı tam, _argümanlar **t8 : tam 
{
  //değer üc üç; 
  //üc.Yapılandır(10); 
  //üc.Yazdır(); 
  //örnek::Başlat();
  //test();
  //değer k *FILE; 
 // değer at *(tam, tam: tam) = yaz; 
  /*değer aa tam = 11; 
  değer ab *tam ;
  a := 11; 
  b := 13; 
  t := bellek::Topla(a, b); 
  fprintf(Çıktı, 'sanalfprintiftoplama %d + %d = %s\n', a, b, 
    Metin._harfler);*/
  bellek::örnek::Başlat(); 
  küme::Başlat();
  .Yaz("çizelge:\n"); 
  çizelge::Başlat();
  dön sonuç;
}