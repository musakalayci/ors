dahili örs::merkez;
dahili örs::merkez::belge;
dahili örs::merkez::c::stdio;


sayaç terimler
{
  Birim = 128;
  Tür;
  Boş; 
  Hiç;
  Kütüphane;
  İçer;
  Her; 
  Durum; 
  Sayaç; 
  Seçim; 
  Varsayılan; 
  Git; 
  Geç;
  Son;
  Tekrar; 
  Devam; 
  Eğer; 
  Eğer_Ki;
  Değilse; 
  Dön; 
  Değer; 
  Şey; 
  İş;
  Ortak; 
  Tüm;

  Yerel; 
  Küresel;
  Yaban; 
  İçsel;
  Sanal; 
  Geçişsiz;

  Evet;
  Hayır;
  Ve;
  Ya_Da;

  Yeni; 
  Sil; 
  Boşalt; 
  Doldur; 
  Temiz; 
  Geçir;
  hafıza(Yeni, Sil, Boşalt, Doldur, Temiz, Geçir);

  DeğişkenGirdi;
  EH;
  T8;
  T16;
  T32;
  T64;
  T128;
  Tam;
  tamlar(T8, T16, T32, T64, T128, Tam);


  D8;
  D16;
  D32;
  D64;
  D128;
  Doğal;
  doğallar(D8, D16, D32, D64, D128, Doğal);


  O32;
  O64;
  O128;
  Ondalık;
  ondalıklar(O32, O64, O128);

  Mimari;

  Harf; 
  Metin;
  Simge; 
}

sayaç türleri 
{
  Son       = 0;
  Baş       = 1; 
  Etkisiz   = 2; 
  Metin     = 3;
  Harf      = 4;
  Hata      = 5; 
  Yorum     = 6; 
  Sözcük    = 7;
  Terim     = 8;
  Noktalama = 9;
  Sayı      = 10; 
  Boş       = 11;
}

sayaç hata 
{
  Bilinmeyen = 1;
}

sayaç özellik
{
  Ünlem           = merkez::ascii::Ünlem;
  Çift_Tırnak     = merkez::ascii::Çift_Tırnak;
  Kare            = merkez::ascii::Kare; 
  Yüzde           = merkez::ascii::Yüzde;
  Tek_Tırnak      = merkez::ascii::Tek_Tırnak;
  Yıldız          = merkez::ascii::Yıldız;
  Parantez_Aç     = merkez::ascii::Parantez_Aç;
  Parantez_Kapa   = merkez::ascii::Parantez_Kapa; 
  Artı            = merkez::ascii::Artı; 
  Virgül          = merkez::ascii::Virgül;
  Eksi            = merkez::ascii::Eksi; 
  Nokta           = merkez::ascii::Nokta; 
  Soru            = merkez::ascii::Soru; 
  Bölü            = merkez::ascii::Bölü;
  Bölü_Ters       = merkez::ascii::Bölü_Ters; 
  İki_Nokta       = merkez::ascii::İki_Nokta; 
  Noktalı_Virgül  = merkez::ascii::Noktalı_Virgül;
  Küçüktür        = merkez::ascii::Küçük; 
  Eşit            = merkez::ascii::Eşit;
  Büyüktür        = merkez::ascii::Büyük;
  Kutu_Aç         = merkez::ascii::Kutu_Aç;
  Kutu_Kapa       = merkez::ascii::Kutu_Kapa;
  Küme_Aç         = merkez::ascii::Küme_Aç;
  Tekil_Ya_Da     = merkez::ascii::Ayraç;
  Küme_Kapa       = merkez::ascii::Küme_Kapa;
  Bit_Tersleme    = merkez::ascii::Yaklaşık;
  Tekil_Ters_Yada = merkez::ascii::Şapka;
  Tekil_Ve        = merkez::ascii::Ve;
  Mektup          = merkez::ascii::Mektup;

  Üç_Nokta;
  Arttır;
  Azalt;
  Ya_Da;
  Ve;
  Büyük_Eşit;
  Küçük_Eşit;
  Sağa_Kaydır; 
  Sola_Kaydır;
  Eşittir; 
  Eşit_Değildir;
  Arama;
  Böl_Eşit;
  Tekil_Ya_Da_Eşit;
  Tekil_Ve_Eşit;
  Tekil_Ters_Ya_da_Eşit;
  Sağa_Kaydır_Eşit;
  Sola_Kaydır_Eşit;
  Eksi_Eşit;
  Artı_Eşit; 
  Bit_Tersle_Eşit;
  Geri_Ok;
  İleri_Ok;
  İleri_Çift_Ok;
  Pascal_Eşit;
}

tür konum 
{
  baş   d32;
  bitiş d32; 
  satır d32; 
  sütun d32;
  Kaynak *belge::bayt;
}

öz *konum 
iş Bilgi _bellek *t8, uzunluk mimari : tam 
{
  dön stdio::snprintf(
    _bellek, uzunluk, 
    `%s:%u:%u [%u, %u] `, 
    öz->Kaynak->_konum,
    öz->satır, 
    öz->sütun,
    öz->baş, 
    öz->bitiş);
}

sayaç SayıTarzı 
{
  İkilik    = 2; 
  Sekizlik  = 8;
  Ondalık   = 10;
  OnAltılık = 16;
}

tür sayı 
{
  tarz  t32; 
  boyut t32;
}

tür t
{
  sıra  t32;
  sınır t32;
  konum konum;
  tür özellik 
  {
    türü  türleri;
    detay t32;
  }
  ortak içerik 
  {
    _t    mimari;
    Sayı  *sayı;
    Metin *metin; 

  }
  Tarama *tarama::t;
  Önceki  *t;
  Sonraki *t;
}

tür kök 
{
  nüfus    t32;
  Şuan     *t;
  Gelecek  *t;
  Baş      *t;
  Son      *t;
  Ağaç     *t;
}

Kök *kök 
iş Temizle 
{
  Yedek := Kök->Baş; 
  her Simge := Kök->Baş; Simge; :
  {   
    Yedek = Simge->Sonraki;
    durum Simge->özellik.türü: 
    {
      seçim türleri::Metin:
        sil Simge->içerik.Metin->Harfler;
        sil Simge->içerik.Metin;
    }
    sil Simge;
    Simge = Yedek;
  }
}

öz *kök 
iş Ekle Simge *t 
{
  eğer öz->nüfus == 0:
  {
    öz->Baş = Simge;
    öz->Son = Simge;
  } 
  değilse 
  {
    Simge->Önceki    = öz->Son;
    öz->Son->Sonraki = Simge; 
    öz->Son          = Simge;
  }
  öz->Şuan = Simge;
  Simge->sıra = öz->nüfus;
  öz->nüfus++;
}

öz *kök 
iş YeniEkle türü t32, detay t32  : *t 
{
  Simge := Yeni(
    öz->Baş->Tarama, 
    türü, 
    detay);
  eğer öz->nüfus == 0:
  {
    öz->Baş = Simge;
    öz->Son = Simge;
  } 
  değilse 
  {

    Simge->Önceki    = öz->Son;
    öz->Son->Sonraki = Simge; 
    öz->Son          = Simge;
  }
  öz->Şuan = Simge;
  Simge->sıra = öz->nüfus;
  öz->nüfus++;
  dön Simge;
}

öz *kök 
iş Gez Arayüz *(*t :) 
{
  her Simge := öz->Baş; Simge; Simge = Simge->Sonraki:
    Arayüz(Simge);
}



iş Yeni Tarama *tarama::t, türü t32, detay t32 : *t 
{
  Simge := temiz(t);
  Simge->özellik.türü  = türü;
  Simge->Tarama        = Tarama;
  Simge->özellik.detay = detay;
  Simge->konum.Kaynak  = Tarama->Belge;
  Simge->konum.baş     = Tarama->imleç.konum;
  Simge->konum.bitiş   = Tarama->imleç.okumaKonumu;
  Simge->konum.satır   = Tarama->imleç.satır;
  Simge->konum.sütun   = Tarama->imleç.sütun;
  dön Simge; 
}

öz *t 
iş TürBilgisi _bellek *t8, uzunluk mimari : t32
{
  değer d tam = 0;
  durum öz->özellik.türü: 
  {
    seçim türleri::Son: 
      d += stdio::snprintf(_bellek, uzunluk, `Son`);
    seçim türleri::Baş: 
      d += stdio::snprintf(_bellek, uzunluk, `Baş`);
    seçim türleri::Etkisiz: 
      d += stdio::snprintf(_bellek, uzunluk, `Etkisiz`);
    seçim türleri::Metin:
      d += stdio::snprintf(
        _bellek, uzunluk, 
        `Metin : %s`, 
        öz->içerik.Metin->Harfler);
    seçim türleri::Harf:
      d += stdio::snprintf(_bellek, uzunluk, `Harf`);
    seçim türleri::Hata:
      d += stdio::snprintf(_bellek, uzunluk, `Hata`);
    seçim türleri::Yorum:
      d += stdio::snprintf(_bellek, uzunluk, `Yorum`);
    seçim türleri::Sözcük:
      d += stdio::snprintf(_bellek, uzunluk, `Sözcük`);
    seçim türleri::Terim:
      d += stdio::snprintf(_bellek, uzunluk, `Terim`);
    seçim türleri::Noktalama:
      d += stdio::snprintf(_bellek, uzunluk, `Noktalama`);
    seçim türleri::Sayı:
      d += stdio::snprintf(_bellek, uzunluk, `Sayı`);
    seçim türleri::Boş:
      d += stdio::snprintf(_bellek, uzunluk, `Boş`);
    varsayılan: 
      d += stdio::snprintf(_bellek, uzunluk, `Bilinmiyor`);
  }
  dön d;
}

öz *t 
iş Yazdır 
{
  d := 0_st32;
  d += öz->konum.Bilgi(öz->Tarama->_bellek, 4096_st64);
  d += öz->TürBilgisi(&öz->Tarama->_bellek[d], 4096_st64);
  stdio::printf(`--> %s %s\n\n`,
    öz->Tarama->_bellek,
    öz->Tarama->_terimler[öz->özellik.detay]);
}