dahili örs::merkez::belge;
dahili örs::merkez::küme::sözlük; 
dahili örs::merkez::c::stdlib;
dahili örs::merkez::c::stdio;
dahili örs::merkez::dizi; 
dahili örs::merkez::c::unistd;  
dahili örs::merkez::c;
dahili örs::merkez::bellek;


tür kesit 
{
  başı tam; 
  sonu tam;
}



tür sözlük   sözlük::k'*imge; 
tür t 
{
  durumu    tam;
  imleç     imleç;
  ibre      ibre;  
  terimler  terimler; 
  bellek    bellek::t;
  hücreler  hücreler;
  Girdi    *belge::baytlar;
  Kök      *hücre;
  _sekme   *t8;
}

öz *t 
iş TaramaYenile 
{
  öz->ibre.Yenile();
}

Uzengi *t 
iş Yapılandır Girdi *belge::baytlar
{
  Uzengi->Girdi = Girdi;   
  Uzengi->imleç.Sıfırla(); 
  Uzengi->ibre.Yapılandır();  
  Uzengi->hücreler.Yapılandır(32);
  Uzengi->terimler.Hazırla();

  Ad          := metin::Yeni(32)->Ekle("kök");
  Uzengi->Kök  = Uzengi->YeniHücre(); 
  Uzengi->Kök->Öz->Ad = Ad; 
  Uzengi->_sekme = '                                  ';
  Uzengi->hücreler.Ekle(Uzengi->Kök);
  Uzengi->ilerlet();
}




Uzengi *t 
sanal iş Devir : eh 
{
  değer d eh = evet;  
  durum Uzengi->ibre.Şuan->özellik: 
  {
    seçim Özellikler::Son: 
      d = hayır;
    seçim Özellikler::Hata:  
      Uzengi->HataVer(Uzengi->ibre.Şuan->içerik.kod);
      d = hayır; 
    varsayılan: 
      d = evet; 
  }
  dön d;
}

Uzengi *t 
iş YeniTanım özellik tam, içerik şey: *imge 
{
  Imge := Uzengi->YeniImge(özellik); 
  Imge->içerik.Genel = içerik; 
  dön Imge;
}


Uzengi *t 
iş KümeDeğerlendir Tanım *imge: *imge 
{

}

Uzengi *t 
iş DiziDeğerlendir Tanım *imge: *imge 
{
  Şuan := Uzengi->Sıradaki();  
  Dizi := temiz(dizi); 
  Dizi->içerik.Yapılandır(32); 
  Tanım->içerik.Dizi = Dizi; 
  Tanım->özellik = Özellikler::Dizi;
  değer türü tam = 0;
  her  Uzengi.Devir(): 
  {
    durum Şuan->özellik: 
    {
      seçim Özellikler::Noktalama: 
        durum Şuan->içerik.noktalama: 
        {
          seçim merkez::ascii::Virgül: 
            Şuan = Uzengi->Sıradaki(); 
          seçim merkez::ascii::Kutu_Kapa: 
            Uzengi->Sıradaki(); 
            son; 
          varsayılan: 
            dön Uzengi->HataVer(Hatalar::Sözdizimi_Dizi); 
        }
      seçim Özellikler::Harfler:
        Gelen := Uzengi->YeniImge(Özellikler::D_Metin); 
        Gelen->içerik.Metin = Şuan->içerik.Metin; 
        Dizi->Ekle(Gelen); 
        Şuan = Uzengi->Sıradaki();

    } 
  }
  dön Tanım;
}

Uzengi *t 
iş Değerlendir Tanım *imge :*imge
{
  Şuan := Uzengi->Sıradaki();  
  durum Şuan->özellik: 
  {
    seçim Özellikler::Noktalama: 
      durum Şuan->içerik.noktalama: 
      {
        seçim merkez::ascii::Kutu_Aç: 
          dön Uzengi->DiziDeğerlendir(Tanım); 
        seçim merkez::ascii::Küme_Aç: 
          Uzengi->Sıradaki();
          dön Uzengi->Hücre(Tanım); 
      }
    seçim Özellikler::Tanım: 
      dön Uzengi->Hücre(Tanım);
    seçim Özellikler::Rakamlar: 
      Tanım->içerik.sayı = Şuan->içerik.sayı; 
      Tanım->özellik     = Özellikler::Sayı;  
      Uzengi->Sıradaki();
      dön Tanım; 
    seçim Özellikler::Harfler:
      Tanım->özellik = Özellikler::Metin;  
      Tanım->içerik.Metin = Şuan->içerik.Metin;  
      Uzengi->Sıradaki();
      dön Tanım; 
    seçim Özellikler::Yorum: 
      Şuan = Uzengi->Sıradaki(); 
      tekrar;
    varsayılan: 
      stdio::printf('allah allah %d\n', Şuan->özellik);
      Şuan->Bilgi(Uzengi, 0);
  }
}

Uzengi *t 
sanal iş Şuanki : *imge 
{
  dön Uzengi->ibre.Şuan;
}


Uzengi *t 
iş Hücrelendir Tanım *imge : *imge 
{
  ÜstHücre                := Uzengi->hücreler.Son(); 
  değer SonHücre *hücre    = ÜstHücre;  
  değer Hücre *hücre       = boş;
  Şuan                    := Uzengi.Şuanki(); 
  her Uzengi.Devir(): 
  {
    durum Şuan->özellik: 
    {
      seçim Özellikler::H_Tanım: 
        Hücre               = temiz(hücre); 
        Hücre->Öz           = Şuan; 
        Şuan->içerik.Hücre  = Hücre;
        Hücre->Üst          = SonHücre;  
        SonHücre->Ekle(Hücre->Öz);
        SonHücre            = Hücre;
        Şuan->özellik       = Özellikler::Hücre; 
        Hücre->astlar.Yapılandır(32);  
        Şuan = Uzengi->Sıradaki(); 
      seçim Özellikler::Tanım: 
        Uzengi->hücreler.Ekle(SonHücre); 
        Gelen := Uzengi->Değerlendir(Şuan);   
       // Gelen->Bilgi(Uzengi, 0);
        SonHücre->Ekle(Gelen);
        Uzengi->hücreler.Çıkar();  
        son;
      varsayılan: 
        dön Uzengi->HataVer(Hatalar::Beklenmeyen);
    }
  }
  dön Tanım;
}



Uzengi *t 
iş Satır : *imge 
{
  Şuan := Uzengi.Şuanki(); 
  değer Tanım *imge = boş;
  durum Şuan->özellik: 
  {
    seçim Özellikler::geçiş():  
      Şuan = Uzengi->Sıradaki();
      tekrar;  
    seçim Özellikler::H_Tanım: 
      Tanım  = Uzengi->Hücrelendir(Şuan); 
    seçim Özellikler::Tanım: 
      Tanım  = Uzengi->Değerlendir(Şuan);  
    varsayılan:   
      stdio::printf(
        '--> %d niye ya', 
        Şuan->özellik); 
      Şuan->Bilgi(Uzengi, 0);
      Tanım = Uzengi->HataVer(Hatalar::Tanım_Bekleniyor);
  } 
  dön Tanım; 
}



Uzengi *t 
iş Köklendir Hücre *hücre : *imge 
{
  değer Dönüş *imge = boş;
  eğer Hücre == boş: 
    dön Dönüş; 
  Şuan := Uzengi.Şuanki(); 
  değer Satır *imge = boş;   
  her Uzengi.Devir(): 
  {
    Satır = Uzengi->Satır();
    durum Satır->özellik: 
    {
      seçim Özellikler::Hata: 
        dön Satır; 
      varsayılan:  
        Şuan = Uzengi.Şuanki(); 
        Hücre->Ekle(Satır);
        durum Şuan->özellik: 
        {
          seçim Özellikler::Noktalama: 
            durum Şuan->içerik.noktalama: 
            {
              seçim merkez::ascii::Virgül: 
                Şuan = Uzengi->Sıradaki();
              seçim merkez::ascii::Noktalı_Virgül,
                    merkez::ascii::Küme_Kapa:
                son;
              varsayılan:  
                dön Uzengi->HataVer(Hatalar::Beklenmeyen);
            }
        } 
    }
    
  }  
  dön Satır;
}

Uzengi *t 
iş Hücre Tanım *imge : *imge
{
  Şuan := Uzengi.Şuanki(); 
  Üst           := Uzengi->hücreler.Son(); 
  değer bekle tam = merkez::ascii::Noktalı_Virgül;
  eğer Şuan->NoktalamaMı(merkez::ascii::Küme_Aç): 
  { 
    Uzengi->Sıradaki(); 
    bekle = merkez::ascii::Küme_Kapa;
  }
  Hücre              := temiz(hücre); 
  Hücre->Öz           = Tanım; 
  Tanım->içerik.Hücre = Hücre;
  Hücre->Üst          = Üst;
  Tanım->özellik      = Özellikler::Hücre; 
  Hücre->astlar.Yapılandır(32); 
  Uzengi->hücreler.Ekle(Hücre); 
  Uzengi->Köklendir(Hücre);
  Çıkarılan := Uzengi->hücreler.Çıkar(); 
 /* Son       := Uzengi->hücreler.Son();
  stdio::printf('çıkarılan %s <= %s\n', 
    Çıkarılan->Öz->Ad->Harfler, 
    Son->Öz->Ad->Harfler);*/
  Şuan = Uzengi.Şuanki(); 
  eğer Şuan->NoktalamaMı(bekle): 
    Uzengi->Sıradaki(); 
  değilse:
    dön Uzengi->HataVer(Hatalar::Beklenmeyen);

 // Tanım->Bilgi(Uzengi);
  dön Tanım; 
}

Uzengi *t 
iş Çözümle 
{
  Hücre := Uzengi->hücreler.Son(); 

  Uzengi->Köklendir(Hücre);

 // Hücre->Öz->Bilgi(Uzengi, 0);
}

Uzengi *t 
iş Arama _girdi *t8: *imge 
{ 
  değer Dönüş *imge = boş;
  Uzengi->bellek.sıfırla();
  t := 0_st8; 
  Hücre := Uzengi->Kök; 
  i := 0;
  her: 
  {
    t = _girdi[i];
    durum t: 
    {
      seçim 0:  
        Dönüş = Hücre->Ara(Uzengi->bellek._veri); 
        son;
      seçim merkez::ascii::küçükler, 
          merkez::ascii::büyükler:  
          Uzengi->bellek.ekle(_girdi[i]);
      seçim merkez::utf8::belirteçler(): 
        Uzengi->bellek.ekle(_girdi[i]); 
        i++;  
        Uzengi->bellek.ekle(_girdi[i]); 
      seçim merkez::ascii::Nokta: 
        Bulunan := Hücre->Ara(Uzengi->bellek._veri); 
       Uzengi->bellek.sıfırla();
        eğer Bulunan: 
          durum Bulunan->özellik: 
          {
            seçim Özellikler::Hücre: 
              Hücre = Bulunan->içerik.Hücre; 
            varsayılan: 
              dön Bulunan;
          }
        değilse:
          dön Dönüş;
      varsayılan: 
        son;
    }
    i++;
  } 
  dön Dönüş;
}

iş Örnek 
{
  değer girdi belge::baytlar = {}; 
  girdi.Yapılandır('denemeler/d.uzn');
  değer uzn t = {};  

  uzn.Yapılandır(&girdi);

  uzn.Çözümle();
  
  _girdi := 'mustafa.ahmet.mahmut.üzü';  
  
  Bulunan := uzn.Arama(_girdi); 
  stdio::printf('bulunan :%s -> %p\n',
          _girdi, 
          Bulunan); 
  eğer Bulunan: 
    Bulunan->Bilgi(&uzn, 0);

  girdi.Temizle(); 
  uzn.Temizle();
}