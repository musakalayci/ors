

tür hücre 
{
  astlar sözlük;
  Öz    *imge;
  Üst   *hücre; 
}

tür hücreler dizi::k'*hücre;
Hücre *hücre 
iş Ekle Imge *imge: *imge 
{
  
  eğer Imge: 
  {
    Hücre->astlar.Ekle(Imge->Ad->_harfler, Imge); 
  }
  dön Imge;
}


Hücre *hücre 
iş Uzantı Uzengi *t: *t8 
{
  Uzengi->bellek.sıfırla();
  _bellek := &Uzengi->bellek._veri[0];  
  
  değer imgeler imgeler; 
  imgeler.Yapılandır(32); 
  Üst := Hücre; 
  her Üst: 
  {
    imgeler.Ekle(Üst->Öz); 
    Üst = Üst->Üst;
  } 
  
  boyut := 1024_st64;  
  yazılan := 0_st64; 
  her i := imgeler.boyut -1; i >= 0; i--: 
  {
    I := imgeler.Nesneler[i];  
    kalan := boyut -yazılan - 1;
    eğer i == imgeler.boyut -1: 
      yazılan += stdio::snprintf(
      &Uzengi->bellek._veri[yazılan], 
      kalan , 
      '%s', 
      I->Ad->_harfler);
    değilse:
      yazılan += stdio::snprintf(
      &Uzengi->bellek._veri[yazılan], 
      kalan , 
      '.%s', 
      I->Ad->_harfler);
  }

  imgeler.Temizle();
  dön &Uzengi->bellek._veri[0];
}


Hücre *hücre 
iş Ara _ad *t8: *imge
{
  Bulunan := Hücre->astlar.Ara(_ad); 
  dön Bulunan;
}

Hücre *hücre 
iş Bilgi Uzengi *t, sekme tam 
{
  boyut := Hücre->astlar.yığın.boyut; 
  değer _üst *t8 = boş; 
  eğer Hücre->Üst: 
  {
    _üst = Hücre->Üst->Öz->Ad->_harfler;
  } 
  _uzantı := Hücre->Uzantı(Uzengi);
  stdio::printf('hücre[%d] %s < %s\n', 
    boyut, 
    _uzantı, _üst); 
  stdio::printf('------------------------------------------\n');
  her i := 0; i < boyut; i++: 
  {
    I := Hücre->astlar.yığın.Nesneler[i]->Öz;  
    I->Bilgi(Uzengi, sekme + 2);
  } 

    stdio::printf('\n');
}

Uzengi *t 
iş YeniHücre : *hücre
{
  Hücre                  := temiz(hücre); 
  Hücre->Öz               = Uzengi->YeniImge(
    Özellikler::Hücre); 
  Hücre->Öz->içerik.Hücre = Hücre; 
  Hücre->Üst              = boş; 
  Hücre->astlar.Yapılandır(32);
  dön Hücre; 
} 

