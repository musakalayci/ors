
tür satır
{
  boyut    t32;
  hacim    t32;
  kalan    t32;
  kullanım t16;
  özellik  t16;
  Veri     şey;
}

Satır *satır 
iş temizle 
{
  Satır->kullanım = 0;
  Satır->boyut    = 0;
  str::memset(Satır->Veri, 0, Satır->hacim);
}

iş satırYazdır Satır *satır
{
  stdio::printf('\n{özellik %d, kullanım: %d, boyut : %d, hacim %d, kalan: %d}\n', 
    Satır->özellik,
    Satır->kullanım, 
    Satır->boyut, 
    Satır->hacim, 
    (Satır->hacim - Satır->boyut));
  i := 0; 
  yazılan := 0;
  her k:= 0; i < Satır->boyut; k++:
  {
    yazılan += stdio::printf('%6d: ', k);
    her j := 0; j < 8 && (i < Satır->boyut); j++:
    {
      yazılan += stdio::printf('%d|ox%02x ',  
        j, Satır->Veri[i]);
      i++;
    }
    eğer !(i % 8):
      stdio::printf('\n');
    //tireler(yazılan);
    yazılan = 0;
  }
  stdio::printf('\n');
}



tür satırlar zincir::k'*satır;


S *satır 
bağımsız iş Yeni Kare *t : *satır 
{
  K := Kare;
  boyut          := Kare->genişlik + @satır;

  Satır          := <*satır>temiz(t8[boyut]);
  Satır->hacim    = Kare->genişlik;
  Satır->Veri     = <şey>(&Satır[1]);
  Satır->kullanım = 1;
  Satır->özellik  = Kare->görev;
  Kare->satırlar->Ekle(Satır);
  dön Satır;
}

S *satır 
bağımsız iş YeniDizi Kare *t , boyut mimari: *satır 
{
  K := Kare;
  istenecek      := boyut + @satır;

  Satır          := <*satır>temiz(t8[istenecek]);
  Satır->hacim    = boyut;
  Satır->Veri     = <şey>(&Satır[1]);
  Satır->kullanım = 1; 
  Satır->boyut    = boyut;
  Satır->özellik  = Kare->görev;
  Kare->satırlar->Ekle(Satır);
  dön Satır;
}

