
tür yayvanHücre
{
  imge   tam;
  seviye tam;
  Sol *yayvanHücre;
  Sağ *yayvanHücre;
}

tür yayvan 
{
  nüfus tam;
  Kök   *yayvanHücre;
}

Y *yayvan 
bağımsız küresel iş Yeni : *yayvan
{
  Yayvan := temiz(yayvan);
  dön Yayvan;
}



Y *yayvanHücre 
bağımsız küresel iş Yeni imge tam: *yayvanHücre 
{
  Yayvan := temiz(yayvanHücre);
  Yayvan->imge = imge;
  dön Yayvan;
}

Yayvan *yayvanHücre 
iş sağaDön : *yayvanHücre 
{
  Y := Yayvan;
  Sağ := Yayvan->Sol; 
  Yayvan->Sol = Sağ->Sağ;
  Sağ->Sağ = Yayvan;
  dön Sağ;
}

Yayvan *yayvanHücre 
iş solaDön : *yayvanHücre 
{
  Sol := Yayvan->Sağ;
  Yayvan->Sağ = Sol->Sol;
  Sol->Sol = Yayvan;
  dön Sol;
} 

Kök *yayvanHücre 
küresel iş Yay imge tam: *yayvanHücre 
{
  k := Kök;
  eğer !Kök:
    dön Kök;
eğer (imge == Kök->imge): 
  dön Kök;
  eğer Kök->imge > imge:
  {
    eğer !Kök->Sol:
      dön Kök;
    
    eğer Kök->Sol->imge > imge:
    {
      EnSol := Kök->Sol->Sol;
      Kök->Sol->Sol = EnSol->Yay(imge);
      Kök = Kök->sağaDön();
    }
    eğer ki Kök->Sol->imge < imge:
    {
      EnSağ := Kök->Sol->Sağ;
      Kök->Sol->Sağ = EnSağ->Yay(imge);
      eğer Kök->Sol->Sağ:
        Kök->Sol = Kök->Sol->solaDön();
    }
    değilse: {}
    
    eğer !Kök->Sol:
      dön Kök;
    değilse:
      dön Kök->sağaDön();
  }
  değilse:
  {
    eğer !Kök->Sağ: dön Kök;

    eğer Kök->Sağ->imge > imge:
    {
      EnSol := Kök->Sağ->Sol;
      Kök->Sağ->Sol = EnSol->Yay(imge);

      eğer Kök->Sağ->Sol:
        Kök->Sağ = Kök->Sağ->sağaDön();
    }
    eğer ki Kök->Sağ->imge < imge:
    {
      EnSağ := Kök->Sağ->Sağ;
      Kök->Sağ->Sağ = EnSağ->Yay(imge);
      Kök = Kök->solaDön();
    }
    değilse: {}

    eğer !Kök->Sağ:
      dön Kök;
    değilse:
      dön Kök->solaDön();
  }
}

Yayvan *yayvan
küresel iş Ara imge tam: *yayvanHücre
{
  eğer Yayvan->Kök: 
  {
    Gelen := Yayvan->Kök->Yay(imge);
    eğer Gelen: 
      Yayvan->Kök = Gelen;
    dön Gelen;
  }
  dön boş;
}

Yayvan *yayvan 
küresel iş Ekle imge tam : *yayvanHücre
{
  Kök := Yayvan->Kök;
  eğer !Kök:
  {
    Yayvan->Kök = yayvanHücre::Yeni(imge);
    dön Yayvan->Kök;
  }

  Yayvan->Kök = Kök->Yay(imge);
  Kök = Yayvan->Kök;
  eğer Kök->imge == imge:
    dön Kök;
  
  Yeni := yayvanHücre::Yeni(imge);
  eğer Kök->imge > imge:
  {
    Yeni->Sağ = Kök;
    Yeni->Sol = Kök->Sol;
    Kök->Sol = boş;
  }
  değilse:
  {
    Yeni->Sol = Kök;
    Yeni->Sağ = Kök->Sağ;
    Kök->Sağ  = boş;
  }
  Yayvan->nüfus++; 
  Yayvan->Kök = Yeni;
  dön Yeni;
}


iş Yaz Kök *yayvanHücre 
{
  eğer Kök:
  {
    stdio::printf('%d ', Kök->imge);
    Yaz(Kök->Sol);
    Yaz(Kök->Sağ);
  }
}


tür avlHücre 
{
  imge tam;
  _sıra tam;
  Sol *avlHücre;
  Sağ *avlHücre;
}

 iş büyük a tam, b tam  : tam
{
  eğer a > b: dön a;
  değilse: dön b;
}

Hücre *avlHücre 
iş sıra : tam 
{
  eğer Hücre:
    dön Hücre->_sıra;
  dön 0;
}

H *avlHücre 
bağımsız küresel iş Yeni imge tam : *avlHücre 
{
  Hücre := temiz(avlHücre);
  Hücre->_sıra = 1;
  Hücre->imge = imge;
  dön Hücre;
}

Hücre *avlHücre 
iş sağaDön : *avlHücre
{
  X := Hücre->Sol;
  T2 := X->Sağ;
  X->Sağ = Hücre;
  Hücre->Sol = T2;
  Hücre->_sıra = büyük(Hücre->Sol->sıra(), Hücre->Sağ->sıra()) + 1;
  X->_sıra    = büyük(X->Sol->sıra(), X->Sağ->sıra()) + 1;
  dön X;
}

Hücre *avlHücre 
iş solaDön :*avlHücre
{
  Y           := Hücre->Sağ;
  T2          := Y->Sol;
  Y->Sol       = Hücre;
  Hücre->Sağ   = T2;
  Hücre->_sıra = büyük(Hücre->Sol->sıra(), Hücre->Sağ->sıra()) + 1;
  Y->_sıra     = büyük(Y->Sol->sıra(), Y->Sağ->sıra()) + 1;
  dön Y; 
}

Hücre *avlHücre 
iş denge : tam 
{
  eğer Hücre:
  {
    dön Hücre->Sol->sıra() - Hücre->Sağ->sıra();
  }
  dön 0;
}

tür avl
{
  nüfus tam;
  Kök   *avlHücre;
}

A *avl 
bağımsız küresel iş Yeni : *avl
{
  Avl := temiz(avl);
  dön Avl;
}

Hücre *avlHücre
iş ekle imge tam : *avlHücre 
{
  eğer !Hücre: 
  {
    dön avlHücre::Yeni(imge);
  }
  eğer imge < Hücre->imge:
    Hücre->Sol = Hücre->Sol->ekle(imge);
  eğer ki imge > Hücre->imge:
    Hücre->Sağ = Hücre->Sağ->ekle(imge);
  değilse:
    dön Hücre;
  
  Hücre->_sıra = 1 + büyük(Hücre->Sol->sıra(), Hücre->Sağ->sıra());
  denge := Hücre->denge();
  eğer denge > 1 && (imge < Hücre->Sol->imge):
    dön Hücre->sağaDön();
  eğer denge < -1 && (imge > Hücre->Sağ->imge):
    dön Hücre->solaDön();
  eğer denge > 1 && (imge > Hücre->Sol->imge):
  {
    Hücre->Sol = Hücre->Sol->solaDön();
    dön Hücre->sağaDön();
  }
  eğer denge < -1 && (imge < Hücre->Sağ->imge):
  {
    Hücre->Sağ = Hücre->Sağ->sağaDön();
    dön Hücre->solaDön();
  }
  dön Hücre;
}

Avl *avl 
küresel iş Ekle imge tam: *avlHücre 
{
  A := Avl;
  Avl->Kök = Avl->Kök->ekle(imge);
  Avl->nüfus++;
  dön Avl->Kök;
}

 
küresel iş Gez Hücre *avlHücre
{
   eğer Hücre:
   {

     Gez(Hücre->Sol);
     stdio::printf('%d ', Hücre->imge);
     Gez(Hücre->Sağ);
   }
}

küresel iş YayvanÖrnek 
{
  değer tamlar tam[7] = [32, 15, 40, 12, 14, 59, 89]; 
  //değer ilk tam = tamlar[0];
  Kök := yayvan::Yeni();

  her i := 0; i < 7; i++:
  {
    değer eklenen tam = tamlar[i];
    Gelen := Kök->Ekle(tamlar[i]);
    stdio::printf('eklenen :%d, kök: %d, %d\n', eklenen, Gelen->imge, Kök->Kök->imge);
  }
  Yaz(Kök->Kök);
  merkez::iletişim::YeniSatır();
  Gelen := Kök->Ara(14);
  Yaz(Kök->Kök); 
  iletişim::YeniSatır();
  Yaz(Gelen);
  stdio::printf('--> Gelen: %d, Gelen: %p, Kök : %p\n\n\nAvl örnek:\n', 
    Gelen->imge, 
    Gelen, Kök->Kök);
  
  Avl := avl::Yeni();
  ilk := Avl->Kök;
  her i := 0; i < 7; i++: 
  {
    G := Avl->Ekle(tamlar[i]); 
    eğer i == 0:
    {
      ilk = G;
    }
  }

  Gez(Avl->Kök);
}
