

tür argümanlar 
{
  sayı    t32;
  _ilk   *t8;
  _tümü **t8;
}

Argümanlar *argümanlar 
iş Yapılandır 
  sayı tam, 
  _argümanlar **t8 
{
  Argümanlar->sayı = sayı;
  Argümanlar->_ilk = _argümanlar[0];
  Argümanlar->_tümü = _argümanlar; 
}

iş yardım
{
  i::Yaz(
    "%s:%s yardım:\n"
    "  Sıralı seçenekler:\n"
    "  -y|h : Bu bilgileri yazdırır.\n"
    "  -s|v : Sürüm bilgilerini yazdırır.\n"
    "  -d   : Hedef dosyayı belirler\n"
    "         ve o dosyada derlemeyi başlatır.\n"
    "  -o   : Özelleştirme belgesini belirler\n"
    "         ve derlemeyi o dosyada başlatır.\n" , Yazılım, Sürüm);
}

Derleme *t
küresel iş 
HatalıÇıkış Biçim *metin, _argümanlar ... 
{
  //şimdi bu va_list her bakımdan sorunlu. 
  //bunu diğer işlemlere aktaramıyorsun. 
  //aktarttırırım ama
  //eğer ki öyle yapsam sadece linuxta çalışacak
  //o da güvenlik hatası vermezse ki daha önceki denemelerimde verdi
  //kendimiz el atmamız lazım. 
 // Derleme->Bellek->Yaz(_biçim, _argümanlar); 
  stdarg::va_start(_argümanlar);
  stdio::vprintf(&Biçim->_harfler[0], _argümanlar);
  stdarg::va_end(_argümanlar);
  
  c::unistd::exit(0);
}

iş sürüm 
{
  i::Yaz("%s:%s\n", Yazılım, Sürüm);
}

Derleme *t 
iş argümanlarıOku
{
  i := 1;
  
  eğer !unistd::getcwd(Derleme->_çalışmaYolu, 4096):
    Derleme->HatalıÇıkış(
      "Çalışma yolu bilgisi alınamadı.\n");


  eğer Derleme->argümanlar.sayı > 1: 
  {
    _ilk := Derleme->argümanlar._tümü[i]; 
    durum _ilk[0]:
    {
      seçim merkez::ascii::Eksi:
        durum _ilk[1]:
        {
          seçim merkez::ascii::d:
            eğer Derleme->argümanlar.sayı == 3:
            {
              Derleme->özellik = özellik::Çoğul;
              _hedef := Derleme->argümanlar._tümü[2];
              _st    := merkez::c::str::strrchr(_hedef, merkez::ascii::Bölü);
             // stdio::printf('heyoo %s -%s-\n', _hedef, &_st[1]); 
              değer stat sys::stat_t = {};
              lstat := sys::lstat(_hedef, &stat); 
              eğer lstat < 0:   
                Derleme->HatalıÇıkış("%s konumu yok.", _hedef);
              değilse: 
              {
              //  stdio::printf('%s `belge var`\n', _hedef);  
                eğer sys::S_ISDIR(stat.st_mode):
                {
                  Derleme->özellik = özellik::Hedef;
                  Derleme->Ad = metin::Harflerden(&_st[1]); 
                  gelen := stdlib::realpath(_hedef, Derleme->Bellek->_veri);
                  Derleme->yollar.Gerçek = yol::Yeni(gelen);
                  Derleme->yollar.Hedef = yol::Yeni(_hedef); 
                }
                değilse: 
                  Derleme->HatalıÇıkış("%s yolu dosya değil.\n", _hedef);
              }
            }
          seçim merkez::ascii::s,
                merkez::ascii::v: 
            sürüm();
          seçim merkez::ascii::y, 
                merkez::ascii::h: 
            geç;
          varsayılan:
            yardım();
        }
      varsayılan: 
        Derleme->HatalıÇıkış("Proje yapısı belirtilmemiş");
    }
    
  } 
  değilse:
    sürüm();
}


