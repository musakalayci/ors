dahili örs::merkez::dizi;
dahili örs::derleme::imge;
dahili örs::derleme::imge::cins;
dahili örs::merkez;
dahili örs::derleme;
dahili örs::derleme::ayıklama;
dahili örs::merkez::yol;
dahili örs::merkez::küme::çizelge;
dahili örs::derleme::kaynak;
dahili örs::derleme::hafıza; 
dahili örs::merkez::iletişim: i;

sayaç Sıralama 
{
  Baş           = 0;
  Değerler        = 1;
  İşlem         = 2; 
  Yabanİşlem    = 3;
  Tanımlıİşlemler = 4;
  Son             = 5;
}

sayaç Durum 
{

  ÖnTanımlı = 1;

}

sayaç Özelleştirme
{
  AraYapılandırma = 0x1;
  Yapılandırma    = 0x2;
  Üretildi        = 0x4;
}

tür _yollar 
{
  nesne   yol::t;
  makina  yol::t;
  //buna ana yol eklemek istemiyorum. üründen alsın abi.
}






sayaç İlkSıralama 
{
  Baş        = 0;
  Dahililer = 0;
  Sayaçlar   = 1;
  Türler     = 2; 
  İşlemler   = 3; 
  Son        = 4;
}






tür t 
{
  no              d32;
  atıflar         tam; 
  derinlik        tam;
  süreç           tam; 
  özelleştirme    mimari;
  Hafıza         *hafıza::t; 
  Üretim         *üretim::t;
  Kaynak         *kaynak::t;
  Ürün           *ürün::t; 
  Türler         *cins::sözlük;  
  İşlemTanımları *imge::işlem::çizelge;
  Kütüphane      *kütüphane::t;
  Kütüphaneler   *kütüphane::sözlük;
  Ayıklama       *ayıklama::t;
  Değerler       *değerler; 
  _sıralama      *imge::imgeler[Sıralama::Son];
  _ilkSıralama   *imge::imgeler[Sıralama::Son];
  yollar          _yollar; 
  çıktı           çıktı;
}

uygulamalı tür değerler hafıza::küme::k'*imge::t;
uygulamalı tür bölümler dizi::k'*t;
uygulamalı tür çizelge  çizelge::k'tam,*t; 


iş _qs_bol Kök **t, dip t32, tepe t32: t32 
{
  kesit := Kök[tepe]->derinlik; 
  i     := dip - 1; 
  her j := dip; j <= tepe -1; j++: 
  eğer Kök[j]->derinlik > kesit: 
  {
    i++; 
    &Kök[i] <=> &Kök[j]; 
  }
  &Kök[i+1] <=> &Kök[tepe]; 
  dön i +1;
}

küresel iş quickSort Girdi **t, dip t32, tepe t32 
{
  eğer dip < tepe: 
  {
    kesit := _qs_bol(Girdi, dip, tepe); 
    quickSort(Girdi, dip, kesit -1); 
    quickSort(Girdi, kesit + 1, tepe);
  }
}

Bölümler *bölümler 
küresel iş Sırala 
{
  quickSort(Bölümler->Nesneler, 0, Bölümler->boyut-1);
}

Bölüm *t 
küresel iş Derinlik: tam 
{
  Şuan := Bölüm->Kütüphane;

  değer Ürün *t = boş; 
  i := 0;
  her Şuan: 
  {
    Şuan = Şuan->Üst;
    i++;
  }
  Bölüm->derinlik = i; 
  dön i;
}




Bölüm *t 
küresel iş AraTemizlik 
{
  eğer Bölüm->özelleştirme & Özelleştirme::AraYapılandırma: 
  {
    Bölüm->çıktı.Temizle();
  }
}

Bölüm *t 
küresel iş Temizle 
{
  eğer Bölüm->özelleştirme & Özelleştirme::AraYapılandırma: 
  {
    
    Bölüm->yollar.nesne.Temizle();
    Bölüm->yollar.makina.Temizle();
  }
}

B **t 
küresel iş Sil 
{
  eğer B: 
  {
    Bölüm := *B; 
    Bölüm->Temizle();
    sil Bölüm;
  }
}

Bölüm *bölüm::t
küresel iş birimEkleme Hafıza *hafıza::t 
{
  her i := Sıralama::Baş; i < Sıralama::Son; i++: 
  {
    Dizi := <*imge::imgeler>Hafıza->Yeni(@imge::imgeler, @mimari); 
    Dizi->Yapılandır(Hafıza, 16);

    Bölüm->_sıralama[i] = Dizi;  
    i::Yaz("//%p\n", Bölüm->_sıralama[i]);
  }
}

Bölüm *t 
küresel iş DeğerlereEkle İmge *imge::t
{
  Bulunan := Bölüm->Değerler->Ara(İmge->Ad); 
  eğer !Bulunan:
    durum İmge->özellik: 
    {
      seçim imge::Özellik::BirimDeğeri,
            imge::Özellik::SanalBirimDeğeri,
            imge::Özellik::Harfler, 
            imge::Özellik::Metin: 
        Bölüm->Değerler->Ekle(İmge->Ad, İmge);
    }
}

