
tür satır
{
  boyut    t32;
  hacim    t32;
  kalan    t32;
  kullanım t16;
  özellik  t16;
  Veri     şey;
}

Satır *satır 
iş temizle 
{
  Satır->kullanım = 0;
  Satır->boyut    = 0;
  str::memset(Satır->Veri, 0, Satır->hacim);
}

değer _sekme t8[32] = '                                ';
 

Satır *satır
küresel iş Yazdır sekme tam
{
  eğer Satır:
  {
    stdio::printf(
      '%.*sözellik %d, kullanım: %d, boyut : %d, hacim %d, kalan: %d\n', 
      sekme, _sekme,
      Satır->özellik,
      Satır->kullanım, 
      Satır->boyut, 
      Satır->hacim, 
      (Satır->hacim - Satır->boyut));
    i := 0; 
    yazılan := 0;
    her k:= 0; i < Satır->boyut; k++:
    {
      yazılan += stdio::printf('%.*s%-6d: ', sekme+2,_sekme,k);
      her j := 0; j < 8 && (i < Satır->boyut); j++:
      {
        yazılan += stdio::printf('%d|ox%02x ',  
          j, Satır->Veri[i]);
        i++;
      }
      eğer !(i % 8):
        stdio::printf('\n');
      yazılan = 0;
    }
    stdio::printf('\n');
  }
}



tür satırlar zincir::k'*satır;


S *satır 
bağımsız iş Yeni Kare *kare : *satır 
{
  K := Kare;
  boyut          := Kare->genişlik + @satır;

  Satır          := <*satır>temiz(t8[boyut]);
  Satır->hacim    = Kare->genişlik;
  Satır->Veri     = <şey>(&Satır[1]);
  Satır->kullanım = 1;
  Satır->özellik  = Kare->görev;
  Kare->Satırlar->Ekle(Satır);
  dön Satır;
}

S *satır 
bağımsız iş YeniDizi Kare *kare , boyut mimari: *satır 
{
  K := Kare;
  istenecek      := boyut + @satır;
  Satır          := <*satır>temiz(t8[istenecek]);
  Satır->hacim    = boyut;
  Satır->Veri     = <şey>(&Satır[1]);
  Satır->kullanım = 1; 
  Satır->boyut    = boyut;
  Satır->özellik  = Kare->görev;
  Kare->Satırlar->Ekle(Satır);
  dön Satır;
}

