birim kesit 
{
  dahili örs::merkez::bellek;
  dahili örs::derleme::hafıza;
  dahili örs::derleme::nesne;
  dahili örs::merkez::dizi::zincir;
  dahili örs::merkez::dizi;
  tür t 
  {
    sıra  tam;
    no    tam;
    Öz   *imge::t;
    Kök  *imge::t;
  }

  uygulamalı tür zincir zincir::k'*t;
  uygulamalı tür kesitler   dizi::k'*t;

  küresel iş Kesit 
    Hafıza *hafıza::t, 
    Kök    *imge::t, 
    Bellek *bellek::t: *t 
  {
    Ad := Hafıza->Bellekten(Bellek);
    İmge := imge::Adlı(Hafıza, Ad, imge::Özellik::I_Kesit); 
    İmge->nesne.Atıf = İmge;
    Kesit := <*t>Hafıza->Yeni(@t, @mimari);
    Kesit->Öz          = İmge; 
    Kesit->Kök = Kök;
    İmge->içerik.Kesit = Kesit;
    Kesit->no          = -1; 
    İmge->nesne.Köklendir(nesne::KökSatır::Kesit, nesne::Anlam::Satır);
    dön Kesit;
  }

  tür _git 
  {
    Öz      *imge::t;
    Konum   *t;
    Gidilen *imge::t;
  }

  Git *_git 
  bağımsız küresel iş Yeni 
    Hafıza *hafıza::t : *_git
  {
    Git := <*_git>Hafıza->Yeni(@_git, @mimari);
    İmge := imge::Yeni(Hafıza, imge::Özellik::Git);
    İmge->içerik.Git = Git;
    Git->Öz          = İmge;
    dön Git;
  }

  tür içGit 
  {
    Öz    *imge::t;
    Konum *t;
  }

  küresel iş YeniİçDönüş Hafıza *hafıza::t: *imge::t 
  {
    İmge := imge::Yeni(Hafıza, imge::Özellik::I_Dön);
    dön İmge;
  }

  
  küresel iş YeniİçGit 
    Hafıza *hafıza::t,
    Konum   *t,
    özellik tam : *içGit 
  {
    Git  := <*içGit>Hafıza->Yeni(@içGit, @mimari);
    İmge := imge::Yeni(Hafıza, özellik);
    Git->Öz            = İmge;
    İmge->içerik.İçGit = Git;
    Git->Konum = Konum;
    İmge->nesne.Atıf = İmge;
    dön Git;
  }

  tür koşulluGit 
  {
    Öz    *imge::t; 
    Koşul *imge::t; 
    Evet  *t;
    Hayır *t;
  }

  tür eğerÇiftleri 
  {
    Taç *t; 
    Beden *t; 
    İmge *imge::t;
  }

  uygulamalı tür çiftler dizi::k'*eğerÇiftleri;


  küresel iş YeniİçKoşulluGit 
    Hafıza *hafıza::t, 
    Koşul  *imge::t, 
    EvetKonumu *t,
    HayırKonumu *t : *koşulluGit 
  {
    Git  := <*koşulluGit> Hafıza->Yeni(@koşulluGit, @mimari);
    İmge := imge::Yeni(Hafıza, imge::Özellik::I_KoşulluGit);
    İmge->içerik.KoşulluGit = Git; 
    Git->Öz = İmge; 
    Git->Koşul = Koşul; 
    Git->Evet = EvetKonumu; 
    Git->Hayır = HayırKonumu; 
    İmge->nesne.Öz = İmge; 
    İmge->nesne.Atıf = İmge;
    İmge->nesne.Anlamlandır(nesne::Anlam::Satır);
    dön Git;
  }
}