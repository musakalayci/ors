dahili örs::merkez::yol;
dahili örs::merkez::dizi; 
dahili örs::derleme;
dahili örs::merkez::c::sys;  
dahili örs::merkez::c::stdio; 
dahili örs::derleme::ürün;
dahili örs::derleme::hafıza; 
dahili örs::merkez::bellek;

sayaç işleme 
{
  Işlenemedi;
  Işlenmedi;
  Işleniyor;
  Işlendi;
}

sayaç Özellik 
{
  Belge = 0;
  Diğer;
  Dosya; 
  Üzengi;
  Kök;
}



tür t 
{
  d          t32;
  no         t32;
  sıra       d32;
  seviye     d32;
  özellik    Özellik;
  işleme     işleme; 
  Yol       *yol::t; 
  Ad        *metin;
  Birim     *derleme::kütüphane::t;
  Üst       *t;
  kaynaklar  kaynaklar;
  Hafıza    *hafıza::t;
  Çözümleme *derleme::çözümleme::t;
  Derleme   *derleme::t; 
}

Kaynak *t 
küresel iş ÖzellikMetni Bellek *bellek::t  
{
  değer _özellik *t8 = (seç Kaynak->özellik: 
    Özellik::Belge:  'belge', 
    Özellik::Diğer:  'diğer',
    Özellik::Dosya:  'dosya', 
    Özellik::Üzengi: 'üzengi', 
    Özellik::Kök:    'kök', 
    varsayılan:      'bilinmiyor'); 
  Bellek->Yaz('%s', _özellik); 
}

uygulamalı tür kaynaklar dizi::k'*t;


Kaynak *t 
küresel iş Temizle 
{
  K := Kaynak;
  Kaynak->kaynaklar.Temizle();
  Kaynak->Yol.Sil(); 
  durum Kaynak->özellik:
  {
    seçim Özellik::Kök:
      stdio::printf('kök no:%d\n', Kaynak->sıra);
      Kaynak->Çözümleme.Sil();
    seçim Özellik::Dosya:
      Kaynak->Çözümleme.Sil();
      Kaynak->Hafıza.Sil();
      geç;
    varsayılan:
      sil Kaynak->Ad;
  }
}

küresel iş Yeni 
Derleme *derleme::t,  
Ad      *metin,
Yol *yol::t, 
özellik tam: *t
{
  Kaynak := temiz(t);
  eğer !Ad: 
    özellik = Özellik::Kök;
  Kaynak->Derleme = Derleme;
  Kaynak->sıra    = Derleme->kaynaklar.boyut;
  Kaynak->özellik = özellik;
  Kaynak->Yol     = yol::Yeni(&Yol->_dizi[0]); 
  Kaynak->Yol->DalÇıkar();
  Kaynak->no = Derleme->sayaçlar.Kaynak();
  Derleme->kaynaklar.Ekle(Kaynak);
  Kaynak->kaynaklar.Yapılandır(16);
  Üst := Derleme->Gezme->kaynaklar.Son(); 
  Kaynak->Üst = Üst;
  eğer Üst: 
  {
    Kaynak->seviye = Üst->seviye + 1; 
    Kaynak->Hafıza = Üst->Hafıza;
    Kaynak->Üst    = Üst;
  }
  durum özellik: 
  {
    seçim Özellik::Dosya:
    {
      Kaynak->Ad = Ad;
      Kaynak->Hafıza = hafıza::Yeni(Derleme); 
      Kaynak->Hafıza->no = Kaynak->sıra; 
      Derleme->hafızalar.Ekle(Kaynak->Hafıza);
      Kaynak->Çözümleme = derleme::çözümleme::Yeni(Derleme, Kaynak);
      Kaynak->Birim = derleme::kütüphane::Yeni(Derleme, Kaynak->Ad); 
      Kaynak->Birim->Kaynak = Kaynak;
      ÜstBirim    := Derleme->Gezme->birimler.Son(); 
      ÜstBirim->AstEkle(Kaynak->Birim);
    }
    seçim Özellik::Belge:
    {
      Kaynak->Ad = Ad; 
    }
    seçim Özellik::Kök:
    {
      Kaynak->Ad = Derleme->Ad;
      Kaynak->Hafıza = &Derleme->hafıza;
      Derleme->hafızalar.Ekle(Kaynak->Hafıza);
      Kaynak->Çözümleme = derleme::çözümleme::Yeni(Derleme, Kaynak);

      Kaynak->Birim = derleme::kütüphane::Yeni(Derleme, Kaynak->Ad); 
      Kaynak->Birim->Kaynak = Kaynak;
      ÜstBirim    := Derleme->Gezme->birimler.Son(); 
      ÜstBirim->AstEkle(Kaynak->Birim);
      //stdio::printf('----------- %d, %p\n', Derleme->kaynaklar.boyut, Ad);
    }
  }
  dön Kaynak;
}

Kaynak *t 
küresel iş Uzantı Bellek *bellek::t 
{
  değer kaynaklar kaynaklar = {};
  kaynaklar.Yapılandır(32);
  değer Şuanki *t = Kaynak;
  her Şuanki:
  {
    kaynaklar.Ekle(Şuanki);
    Şuanki = Şuanki->Üst;
  }
  
  her i := (kaynaklar.boyut -1); i >= 0; i--:
  {
    Şuanki = kaynaklar.Nesneler[i];
    Bellek->Yaz('%s', 
      Şuanki->Ad->_harfler);
  }
  kaynaklar.Temizle();
}