Çözümleme *t 
iş seçimİfadeSabitleri Seç *imge::_durum::t, Seçim *imge::_durum::seçimİfade : *imge::t 
{
  durum Çözümleme->şuanki()->özellik: 
  {
    seçim simge::Özellik::Sözcük,
          simge::Özellik::Sayı,
          simge::Terim::Evet, 
          simge::Terim::Hayır: 
    seçim simge::Özellik::Üç_Nokta,
            simge::Terim::Varsayılan:
    {
      Seç->Varsayılan = Seçim->Öz; 
      Çözümleme->sıradaki(); 
      durum Çözümleme->şuanki()->özellik: 
      {
        seçim simge::Özellik::İki_Nokta: 
          Çözümleme->sıradaki(); 
          dön Seçim->Öz; 
        varsayılan: 
          dön Çözümleme->Hataİmla(
            "seçim ifadesi varsayılanı için beklenmeyen simge.");
      }
    }
    varsayılan: 
      dön Çözümleme->Hataİmla("seçim ifadesi sabitleri için beklenmeyen simge.");
  }
  değer Sabit *imge::t = boş; 
  her i := 0; i < 256 && Çözümleme->Devam(); i++: 
  {
    durum Çözümleme->şuanki()->özellik: 
    {
      seçim simge::Özellik::Virgül:
        Çözümleme->sıradaki(); 
      seçim simge::Özellik::İki_Nokta: 
        Çözümleme->sıradaki(); 
        son; 
      seçim simge::Özellik::Sözcük,
          simge::Özellik::Sayı,
          simge::Terim::Evet, 
          simge::Terim::Hayır: 
        Sabit = Çözümleme->ifade(0); 
        durum Sabit->özellik: 
        {
          seçim imge::Özellik::Hata: 
            dön Sabit; 
          varsayılan: 
            Seçim->sabitler.Ekle(Sabit);
        }
    }
  }
  dön Seçim->Öz; 
}

Çözümleme *t 
iş _seç İmge *imge::t : *imge::t 
{
  Hafıza := Çözümleme->hafıza();
  Seç := imge::_durum::YeniSeç(Hafıza, İmge); 
  Seç->Dağarcık = Çözümleme->YeniDağarcık();
  Çözümleme->sıradaki(); 
  Seç->Taç = Çözümleme->taç(İmge);  
  değer Gelen *imge::t = boş;
  durum Seç->Taç->özellik: 
  {
    seçim imge::Özellik::Hata: 
      dön Seç->Taç; 
  }
  _varsayılan := 0; 
  her i := 0; i < 256 && Çözümleme->Devam(); i++: 
  {
    durum Çözümleme->şuanki()->özellik: 
    {
      seçim simge::Özellik::Virgül: 
        Çözümleme->sıradaki(); 
      seçim simge::Özellik::Parantez_Kapa: 
        son; 
      varsayılan: 
        Seçim := imge::_durum::YeniSeçimİfade(Hafıza, Seç);
        Seçim->Öz->KonumGüncelle(Çözümleme->şuanki()); 
        Seç->Dağarcık->satırlar.Ekle(Seçim->Öz);
        Gelen = Çözümleme->seçimİfadeSabitleri(Seç, Seçim);
        durum Gelen->özellik: 
        {
          seçim imge::Özellik::Hata: 
            dön Gelen; 
        }
        Gelen = Çözümleme->ifade(0); 
        durum Gelen->özellik: 
        {
          seçim imge::Özellik::Hata: 
            dön Gelen; 
        }
        Seçim->İfade = Gelen;  
        Seçim->Öz->KonumSonuGüncelle(Çözümleme->şuanki());
    }
  }
  
  eğer !Seç->Varsayılan: 
    dön Çözümleme->Hataİmla(
      "Seç ifadesinin varsayılan ifade bekleniyor.");
  
  durum Çözümleme->şuanki()->özellik: 
  {
    seçim simge::Özellik::Parantez_Kapa: 
      Çözümleme->sıradaki(); 
    varsayılan: 
      dön Çözümleme->Hataİmla(
        "Seç ifadesinin parantezinin kapanması bekleniyor.");
  }

  İmge->KonumSonuGüncelle(Çözümleme->şuanki());
  dön İmge;
}