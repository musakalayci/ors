Çözümleme *t 
iş _değer : *imge::t 
{
  Çözümleme->sıradaki(); 
  değer İmge *imge::t = boş;
  durum Çözümleme->şuanki()->özellik:
  {
    seçim simge::Özellik::Sözcük: 
      özellik := imge::Özellik::Değer;
      durum Çözümleme->Sonİşlem->Öz->özellik:
      {
        seçim imge::Özellik::Sanalİşlem,
              imge::Özellik::SanalTürİşlemi: 
          özellik = imge::Özellik::SanalDeğer;
      }
      Değer := imge::_değer::Yeni(
        Çözümleme->hafıza(), 
        Çözümleme->şuanki()->içerik.Metin,
        özellik);

      Değer->Öz->KonumGüncelle(Çözümleme->şuanki());
      Çözümleme->tekil(); 
      Gelen := Çözümleme->türÖzeti(Değer->Özet);
      
      durum Gelen->özellik: 
      {
        seçim imge::Özellik::TürÖzeti: 
          İmge = Değer->Öz;
          Değer->Özet = Gelen->içerik.TürÖzeti;
        varsayılan: 
          dön Gelen;
      }
      durum Çözümleme->şuanki()->özellik:
      {
        seçim simge::Özellik::Noktalı_Virgül:
        seçim simge::Özellik::Eşit:
          D := Çözümleme->sıradaki();
          Değer->Başlatma = Çözümleme->ifade(0);

          Kütüphane := Çözümleme->sonKütüphane();
          Bölüm     := Kütüphane->Bölüm;
          durum Değer->Başlatma->özellik: 
          {
            seçim imge::Özellik::Boş: 

            seçim imge::Özellik::Hazne,imge::Özellik::Dizi: 
              Değer->Başlatma->içerik.Hazne->Yapılandır(Bölüm, Değer);
            seçim imge::Özellik::Hata:
              dön Değer->Başlatma;
            
          }
        varsayılan:
          Çözümleme->şuanki()->Yaz("neki");
          dön bildiri::Özel(Çözümleme->Kaynak, 
                bildiri::Çözümleme::İmla, 
                &Çözümleme->Tarama->Şuan->konum, 
                "%s değerinin başlatılması için beklenmeyen simge", 
                İmge->Ad->_harfler);
      }
    varsayılan:
      dön Çözümleme->Hataİmla(
        "Değer tanımı için isim bekleniyor.");
  }
  dön İmge;
}

Çözümleme *t 
iş _birimDeğeri 
  özelleştirme mimari: *imge::t 
{
  Çözümleme->tekil();
  değer İmge *imge::t = boş;
  durum Çözümleme->şuanki()->özellik:
  {
    seçim simge::Özellik::Sözcük: 
      özellik := imge::Özellik::BirimDeğeri;
      
      Değer := imge::_değer::Yeni(
        Çözümleme->hafıza(), 
        Çözümleme->şuanki()->içerik.Metin,
        özellik);
      
      İmge = Değer->Öz;  
      İmge->nesne.Yapılandır(Çözümleme->hafıza(), İmge, boş, 256, nesne::Anlam::Değer);
      Kütüphane := Çözümleme->yığınlar.kütüphane.Son();
      Bölüm     := Kütüphane->Bölüm;
      İmge->Kütüphane = Kütüphane; 

      Değer->Öz->KonumGüncelle(Çözümleme->şuanki());
      Değer->özelleştirme = özelleştirme;
      Çözümleme->tekil(); 
      Gelen := Çözümleme->türÖzeti(Değer->Özet);
      eğer özelleştirme & imge::Özelleştirme::Sanal: 
      {
        Değer->Öz->özellik = imge::Özellik::SanalBirimDeğeri;
        Değer->Öz->nesne.Köklendir(nesne::KökDeğer::Sanal, nesne::Anlam::Değer);
      }
      eğer ki özelleştirme & imge::Özelleştirme::Yaban: 
      {
        Değer->Öz->Yaz("%s", İmge->Ad->_harfler);
        Değer->Öz->nesne.Köklendir(nesne::KökDeğer::Dış, nesne::Anlam::Değer);
      }
      değilse: 
      {
        Değer->Öz->Yaz("%s_d", İmge->Ad->_harfler);
        Değer->Öz->nesne.Köklendir(nesne::KökDeğer::Küresel, nesne::Anlam::Değer);
      }
      durum Gelen->özellik: 
      {
        seçim imge::Özellik::TürÖzeti: 
          İmge = Değer->Öz;
          Değer->Özet = Gelen->içerik.TürÖzeti;
        varsayılan: 
          dön Gelen;
      }
      İmge->nesne.no = 0;
      Bölüm->SıralamayaEkle(İmge);
      Bölüm->DeğerlereEkle(İmge);
      durum Çözümleme->şuanki()->özellik:
      {
        seçim simge::Özellik::Noktalı_Virgül:
        seçim simge::Özellik::Eşit:
          Çözümleme->sıradaki();
          Değer->Başlatma = Çözümleme->ifade(0);
          durum Değer->Başlatma->özellik: 
          {
            seçim imge::Özellik::Hata:
              dön Değer->Başlatma;
            
          }
        varsayılan:
          dön bildiri::Özel(Çözümleme->Kaynak, 
                bildiri::Çözümleme::İmla, 
                &Çözümleme->Tarama->Şuan->konum, 
                "%s değerinin başlatılması için beklenmeyen simge", 
                İmge->Ad->_harfler);
      }
    varsayılan:
      dön Çözümleme->Hataİmla(
        "Değer tanımı için isim bekleniyor.");
  }
  dön İmge;
}

Çözümleme *t 
iş _atıf 
  özelleştirme mimari: 
  *imge::t 
{
  Çözümleme->sıradaki();
  değer İmge *imge::t = boş;
  değer Gelen *imge::t = boş;
  Simge := Çözümleme->şuanki();
  durum Simge->özellik: 
  {
    seçim simge::Özellik::Sözcük:
      İmge = imge::Adlı(
        Çözümleme->hafıza(),
        Simge->içerik.Metin,
        imge::Özellik::Atıf); 
    varsayılan:
      dön Çözümleme->Hataİmla(
        "Atıf tanımı için beklenmeyen simge.");
  }
  Simge = Çözümleme->sıradaki();
  durum Simge->özellik: 
  {
    seçim simge::Özellik::Paskal:
      Çözümleme->sıradaki();
      Gelen = Çözümleme->ifade(0);
      durum Gelen->özellik:
      {
        seçim imge::Özellik::Hata:
          dön Gelen;
      }
      İmge->içerik.Atıf = Gelen;
    varsayılan:
      dön Çözümleme->Hataİmla(
        "Atıf tanımı için paskal ':=' simgesi bekleniyor.");
  }
  Simge = Çözümleme->şuanki();
  durum Simge->özellik:
  {
    seçim simge::Özellik::Noktalı_Virgül:
    varsayılan:
      dön Çözümleme->Hataİmla(
        "Atıf tanımı sonu için noktalı virgül ';' bekleniyor.");
  }
  dön İmge;
}