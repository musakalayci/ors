
Çözümleme *t 
sanal iş TürÖzetiKonum TürÖzeti *imge::cins::özet 
{
  Simge := Çözümleme->şuanki();
  
  durum Simge->özellik: 
  {
    seçim simge::Özellik::Yıldız:
      TürÖzeti->derece++; 
      Simge = Çözümleme->tekil();
      tekrar;       
  } 
}

Çözümleme *t 
iş özetİşlemKonumu : *imge::t 
{
  Hafıza := Çözümleme->hafıza();
  Konum := imge::işlem::YeniKonum(Hafıza); 
  Konum->girdi.Yapılandır(Hafıza, 16);
  Konum->Öz->KonumGüncelle(Çözümleme->şuanki());
  Şuanki := Çözümleme->tekil(); 
  değer Özet *imge::cins::özet = boş; 
  değer Gelen *imge::t = boş;
  her i := 0; i < imge::Sınırlar::Değişkenler; i: 
  {
    durum Şuanki->özellik: 
    {
      
      seçim simge::Özellik::Virgül: 
        Şuanki = Çözümleme->tekil(); 
      seçim simge::Özellik::İki_Nokta: 
        //i::Acil("oldu mu la ?");
        Şuanki = Çözümleme->tekil();
        son; 
      varsayılan: 
        Özet = imge::cins::YeniÖzet(Hafıza, boş);
        Gelen = Çözümleme->türÖzeti(Özet); 
        Şuanki = Çözümleme->şuanki();
        durum Gelen->özellik: 
        {
          seçim imge::Özellik::Hata: 
            dön Gelen; 
          seçim imge::Özellik::TürÖzeti: 
            Konum->girdi.Ekle(Gelen->içerik.TürÖzeti);
            i++;
          varsayılan:
            dön Çözümleme->Beklenmeyen("işlem konumu için beklenmeyen ifade.");
        }
    } 
  }
  durum Şuanki->özellik: 
  {
    seçim simge::Özellik::Parantez_Kapa:
      Özet = imge::cins::YeniÖzet(
            Hafıza, Çözümleme->Derleme->Yapıtaşı(
                      simge::Terim::Boş)->Öz);
          Özet->Öz->KonumGüncelle(Şuanki);
          Konum->Çıktı = Özet;
      Konum->Öz->KonumSonuGüncelle(Şuanki);
      Çözümleme->sıradaki();
    varsayılan: 
      Özet = imge::cins::YeniÖzet(Hafıza, boş);
      Gelen = Çözümleme->türÖzeti(Özet); 
      Şuanki = Çözümleme->şuanki(); 
      durum Şuanki->özellik: 
      {
        seçim simge::Özellik::Parantez_Kapa: 
          //Çözümleme->şuanki()->Yaz("ne ki ???"); 
          Çözümleme->sıradaki();
        varsayılan: 
          dön Çözümleme->HataBeklenen(&Şuanki->konum, 
            "İşlem konumu ifadesi bitişi için parantez kapama bekleniyor.");
      }
      durum Gelen->özellik: 
      {
        seçim imge::Özellik::Hata: 
          dön Gelen; 
        seçim imge::Özellik::TürÖzeti: 
          Konum->Çıktı = Gelen->içerik.TürÖzeti;
        varsayılan:
          dön Çözümleme->Beklenmeyen("işlem konumu dönüşü için beklenmeyen ifade.");
      }

  }
  dön Konum->Öz;
}


Çözümleme *t 
iş türÖzetiDizi 
  Özet *imge::cins::özet: 
  *imge::t 
{
  durum Çözümleme->şuanki()->özellik:
  {
    seçim simge::Özellik::Kutu_Aç:
      Çözümleme->tekil();
    varsayılan:
      Özet->Öz->KonumSonuGüncelle(Çözümleme->şuanki());
      dön Özet->Öz;
  }
  Seviye := Özet;
  Geçici := Özet; 
  Yeni := Özet;
  Hafıza := Çözümleme->hafıza(); 
  Yığın := &Çözümleme->yığınlar.imgeler;
  Yığın->Sıfırla(); 
  Yığın->Ekle(Özet->Öz);
  değer Boyut *imge::t = boş; 
  i := 1;
  her Çözümleme->Devam() && i < 16:
  {
    durum Çözümleme->şuanki()->özellik:
    {
      seçim simge::Özellik::Kutu_Kapa:
        Çözümleme->sıradaki();
        son;
      seçim simge::Özellik::Virgül:
        Çözümleme->sıradaki();
      varsayılan:
      {
        Boyut = Çözümleme->ifade(0); 
        //Boyut->SayıdanSabite();
        //stdio::printf('nnnnnnnnnnnnnnnnnnnnnnnnnn %s\n', Çözümleme->Derleme->Döküm->Bellek->_veri);
        durum Boyut->özellik:
        {
          seçim imge::Özellik::Hata:
            dön Boyut;
        }
        Geçici                  = imge::cins::YeniÖzet(Hafıza, Seviye->Gösterge);
        Geçici->Öz->nesne.Boyut = &Boyut->nesne;
        Yığın->Ekle(Geçici->Öz);
        i++;

      }
    }
  }

  eğer i > 16:
    dön Çözümleme->HataSınır(
      "Tür özeti için dizi sınırı aşılmış.");
  //_imgeler.Temizle(); 
  boyut := Çözümleme->yığınlar.imgeler.boyut; 
 
  her i := 1; i < boyut; i++: 
  {
    eğer (i+1) == boyut: 
    {
      Yığın->Nesneler[i]->içerik.TürÖzeti->Dizi = Özet; 
      //stdio::printf('nnnnnnnnnnnnnnnnnnnnnnnnnn %d\n', i);
    }
    değilse: 
    {
      Seviye = Yığın->Nesneler[i]->içerik.TürÖzeti;
      // stdio::printf('nnnnnnnnnnnnnnnnnnnnnnnnnn %d\n', i);
      //stdio::printf('nnnnnnnnnnnnnnnnnnnnnnnnnn\n');
      Geçici = Yığın->Nesneler[i+1]->içerik.TürÖzeti; 
      Seviye->Dizi = Geçici;
    }
  }
  dön Yığın->Nesneler[1];
}

Çözümleme *t 
iş türÖzetiTaç 
  Özet *imge::cins::özet: 
  *imge::t 
{

  durum Çözümleme->şuanki()->özellik:
  {
    seçim simge::Özellik::Tek_Tırnak:
    varsayılan:
      dön Özet->Öz;
  }

      //Çözümleme->şuanki()->Yaz("taç");
  Taç := Özet->YeniTaç(Çözümleme->hafıza()); 
  değer Donatım *imge::cins::özet = boş;
  Donatım = <**imge::cins::özet>Taç->_donatım;
  değer Ast *imge::cins::özet = boş;
  değer Gelen *imge::t = boş;
  Çözümleme->tekil();
  her i := 0; i < 2 && Çözümleme->Devam(); : 
  {
    durum Çözümleme->şuanki()->özellik:
    {
      seçim simge::Özellik::Virgül:
        Çözümleme->tekil(); 
      seçim simge::Özellik::Noktalı_Virgül: 
        son;
      seçim simge::Özellik::Sözcük, 
            simge::Özellik::Yıldız,
            simge::Terim::yapıtaşları(): 
        Ast = imge::cins::YeniÖzet(Çözümleme->hafıza(), boş);
        Gelen = Çözümleme->türÖzeti(Ast);
        durum Gelen->özellik: 
        {
          seçim imge::Özellik::Hata:
            dön Gelen;
          seçim imge::Özellik::TürÖzeti:
            Taç->_donatım[i] = Gelen->içerik.TürÖzeti;

            //stdio::printf('--> boyut %d; Gelen: %p, hedef: %p\n', Taç->boyut, Gelen->içerik.TürÖzeti, Taç->_donatım[i]);
            //Çözümleme->Derleme->Döküm->İmge(Gelen, 0, '\n');
            Taç->boyut++;
            i++;
          varsayılan:
            dön Çözümleme->Beklenmeyenİmge(
              Gelen, "Tür özeti için beklenmeyen imge.");
        }
      varsayılan:
        son;
    }
  }
  dön Özet->Öz;
}

Çözümleme *t 
iş türÖzeti Özet *imge::cins::özet: *imge::t 
{
  Şuanki := Çözümleme->şuanki(); 
  //Şuanki->Yaz("Tür özeti: ");
  Özet->Öz->KonumGüncelle(Çözümleme->şuanki());
  durum Şuanki->özellik:
  {
    seçim simge::Özellik::Eşittir,
          simge::Özellik::Virgül, 
          simge::Özellik::Noktalı_Virgül:
      dön Çözümleme->Hataİmla("Tür ifadesi bekleniyor.");
    seçim simge::Özellik::Üç_Nokta: 
      //Özet->Gösterge = Çözümleme->Derleme->İmgeler->Dea; 
      eğer !Çözümleme->Sonİşlem: 
      {
        dön Çözümleme->Hataİmla("Sorunlu değişen argüman ifadesi.");
      }
      Çözümleme->tekil();
      dön Çözümleme->Derleme->İmgeler->Dearg->Öz;
  }
  
  Çözümleme->TürÖzetiKonum(Özet); 
  Gelen := Çözümleme->türİfadesi(0);
  durum Gelen->özellik:
  {
    seçim imge::Özellik::Hata,
          imge::Özellik::Bildiri:
      dön Gelen;
    seçim imge::Özellik::İfadeSonu: 
      dön Çözümleme->Hataİmla("Sorunlu tür ifadesi. 2");
    varsayılan:
      Özet->Gösterge = Gelen;
  }
  Gelen = Çözümleme->türÖzetiTaç(Özet);  

  durum Gelen->özellik:
  {
    seçim imge::Özellik::Hata:
      dön Gelen;
  }
  dön Çözümleme->türÖzetiDizi(Özet);
}


Çözümleme *t 
iş türÖzetiDiziEsnek 
  Özet *imge::cins::özet: 
  *imge::t 
{
  durum Çözümleme->şuanki()->özellik: 
  {
    seçim simge::Özellik::Kutu_Aç:
      Çözümleme->sıradaki(); 
    varsayılan:
      dön Özet->Öz;
  }
  değer Boyut *imge::t = boş;
  her Çözümleme->Devam():
  {
    durum Çözümleme->şuanki()->özellik:
    {
      seçim simge::Özellik::Kutu_Kapa:
        Çözümleme->sıradaki();
        son;
      seçim simge::Özellik::Virgül: 
        dön Çözümleme->Hataİmla(
          "Sadece tek boyutlu hafıza istenebilir.");
      varsayılan:
        Boyut = Çözümleme->ifade(0);
        eğer Boyut:
        {
          durum Boyut->özellik: 
          {
            seçim imge::Özellik::Hata:
              dön Boyut; 
            varsayılan:
              Özet->Öz->nesne.Atıf = Boyut;
          }
        }
        değilse:
          dön Çözümleme->Hataİmla("Sorunlu hafıza boyutu ifadesi");
    }
  }
  Özet->Öz->KonumSonuGüncelle(Çözümleme->şuanki());
  dön Özet->Öz;
}

Çözümleme *t 
iş türÖzetiEsnek Özet *imge::cins::özet: *imge::t 
{
  Şuanki := Çözümleme->şuanki(); 
  //Şuanki->Yaz("Tür özeti: ");
  Özet->Öz->KonumGüncelle(Çözümleme->şuanki());
  durum Şuanki->özellik:
  {
    seçim simge::Özellik::Eşittir,
          simge::Özellik::Virgül, 
          simge::Özellik::Noktalı_Virgül:
      dön Çözümleme->Hataİmla("Tür ifadesi bekleniyor.");
    
  }
  
  Çözümleme->TürÖzetiKonum(Özet); 
  Gelen := Çözümleme->türİfadesi(0);
  durum Gelen->özellik:
  {
    seçim imge::Özellik::Hata,
          imge::Özellik::Bildiri:
      dön Gelen;
    varsayılan:
      Özet->Gösterge = Gelen;
  }
  dön Çözümleme->türÖzetiDiziEsnek(Özet);
}