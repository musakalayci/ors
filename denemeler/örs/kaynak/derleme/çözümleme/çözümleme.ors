
dahili örs::derleme::kaynak;
dahili örs::derleme::imge;
dahili örs::merkez::c::stdio;
dahili örs::merkez::bellek; 
dahili örs::derleme::hafıza;
dahili örs::merkez::iletişim: i;

tür sıralar 
{
  türler d32;
  hazneler d32;
  dağarcık d32;
}



tür yığınlar
{
  cins      imge::cins::türler;
  dağarcık  imge::dağarcık::dağarcıklar; 
  imgeler   imge::imgeler;
  kütüphane kütüphane::kütüphaneler;
}

Yığınlar *yığınlar 
iş Yapılandır 
{
  Yığınlar->cins.Yapılandır(32);
  Yığınlar->dağarcık.Yapılandır(32);
  Yığınlar->kütüphane.Yapılandır(32); 
}

Yığınlar *yığınlar 
iş Temizle 
{
  Yığınlar->cins.Temizle();
  Yığınlar->dağarcık.Temizle();
  Yığınlar->kütüphane.Temizle();
}

tür t 
{
  no         t32;
  seviye     t32;
  Tarama    *tarama::t; 
  Kaynak    *kaynak::t;
  Derleme   *derleme::t;
  İfadeSonu *imge::t; 
  Boş       *imge::t;
  Bellek    *bellek::t;
  Hafıza    *hafıza::t; 
  Sonİşlem  *imge::işlem::t; 
  sıralar    sıralar;
  yığınlar   yığınlar;
}

küresel iş 
Yeni Derleme *derleme::t, Kaynak *kaynak::t: *t 
{
  Çözümleme := temiz(t);
  Çözümleme->Derleme = Derleme;
  Çözümleme->Bellek  = temiz(bellek::t);
  Çözümleme->Bellek->Sıfırla();
  Çözümleme->Kaynak  = Kaynak;
  Çözümleme->no      = Kaynak->no; 
  Çözümleme->yığınlar.Yapılandır();
  Çözümleme->Hafıza         = Kaynak->Hafıza;
  Kaynak->Hafıza->Çözümleme = Çözümleme;
  Çözümleme->Tarama         = tarama::Yeni(Çözümleme);  
  Çözümleme->yığınlar.imgeler.Yapılandır(Çözümleme->Hafıza, 32);
  Çözümleme->İfadeSonu = imge::Yeni(Kaynak->Hafıza, imge::Özellik::İfadeSonu);
  Çözümleme->Boş       = imge::Yeni(Kaynak->Hafıza, imge::Özellik::Boş);
  dön Çözümleme;
}

Ç **t 
küresel iş Sil 
{
  eğer Ç:
  {
    Çözümleme := *Ç;
    Çözümleme->Tarama.Sil(); 
    Çözümleme->yığınlar.Temizle();
    sil Çözümleme->Bellek;
    sil Çözümleme;
  }
}

Çözümleme *t 
küresel iş Devam : eh 
{
  durum Çözümleme->Tarama->Şuan->özellik: 
  {
    seçim simge::Özellik::Son: 
    seçim simge::Özellik::Hata:
      dön hayır;
    varsayılan: 
      durum Çözümleme->Kaynak->d: 
      {
        seçim 0: 
          dön evet;
        varsayılan: 
          dön hayır;
      }
  }
}

Çözümleme *t 
sanal iş şuanki : *simge::t 
{
  dön (Çözümleme->Tarama->Şuan);
}
Çözümleme *t 
sanal iş gelecek : *simge::t 
{
  dön (Çözümleme->Tarama->Gelecek);
}

Çözümleme *t 
sanal iş sıradaki : *simge::t 
{
  dön Çözümleme->Tarama->Sıradaki();
}

Çözümleme *t 
sanal iş tekil : *simge::t 
{
  dön Çözümleme->Tarama->SıradakiTekil();
}

Çözümleme *t 
iş sonKütüphane : *kütüphane::t 
{
  dön Çözümleme->yığınlar.kütüphane.Son();
} 

Çözümleme *t 
iş sonDağarcık : *kütüphane::t 
{
  dön Çözümleme->yığınlar.dağarcık.Son();
}

Çözümleme *t 
küresel iş 
hafıza : *hafıza::t 
{
  dön Çözümleme->Hafıza;
}

Çözümleme *t 
küresel iş dağarcıkGüncelle İmge *imge::t 
{
  İmge->Dağarcık = Çözümleme->yığınlar.dağarcık.Son();
  İmge->Kütüphane = Çözümleme->yığınlar.kütüphane.Son();
} 

Çözümleme *t 
küresel iş kütüphaneGüncelle İmge *imge::t 
{
  İmge->Kütüphane = Çözümleme->yığınlar.kütüphane.Son();
}

Çözümleme *t 
küresel iş YeniDağarcık : *imge::dağarcık::t
{
  Dağarcık:= imge::dağarcık::Yeni(
    Çözümleme->hafıza(), Çözümleme->dağarcıkNo());
  Dağarcık->Öz->KonumGüncelle(Çözümleme->şuanki());
  Dağarcık->Üst = Çözümleme->sonDağarcık();
  dön Dağarcık;
}



Çözümleme *t 
küresel iş Başlat Kaynak *kaynak::t
{

  değer Ast *kaynak::t = boş;
  Çözümleme->yığınlar.kütüphane.Ekle(Kaynak->Birim);
  her i := 0; i < Kaynak->kaynaklar.boyut; i++:
  {
    Ast = Kaynak->kaynaklar.Nesneler[i]; 
    durum Ast->özellik:
    {
      seçim kaynak::Özellik::Kök:
        i::Yaz("???????????> kök %s\n", Ast->Ad->_harfler);
      seçim kaynak::Özellik::Dosya:
        //i::Yaz("--> dosyaaa %s\n", Ast->Ad->_harfler); 
        /*Çözümleme->yığınlar.kütüphane.Ekle(Ast->Birim); 
        değer A *kaynak::t = boş;
        her j := 0; j < Ast->kaynaklar.boyut; j++: 
        {
          A = Ast->kaynaklar.Nesneler[i];
          Çözümleme->Başlat(A);
        }
        Çözümleme->yığınlar.kütüphane.Çıkar();*/
      seçim kaynak::Özellik::Belge:
       // Çözümleme->BelgeDeneme(Ast); 
        /*i::Yaz("ast: %s, kütüphane %s\n", Ast->Ad->_harfler,
          Kaynak->Birim->Öz->Ad->_harfler);*/
        Çözümleme->Belge(Ast);
    }
    eğer Ast->d > 0:
      son;
  }
  Çözümleme->yığınlar.kütüphane.Çıkar();
}