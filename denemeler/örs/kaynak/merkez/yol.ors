
birim yol 
{
  dahili c::stdio; 
  dahili c::str; 
  dahili c::error; 
  dahili c::unistd;
  dahili c::sys;
  dahili örs::merkez::iletişim: i;

  sayaç Dönüş 
  {
    Sorunsuz          = 0;
    DosyaYaratılamadı = 1;
    DosyaZatenVar     = 2; 
    HafızaYetersiz    = 3;
  }

  tür ayraçlar dizi::k'tam;
  tür t 
  {
    kök      tam;
    bitiş    tam;
    uzantı   tam;
    ayraçlar ayraçlar;
    _dizi    *t8;
  }

  öz *t 
  sanal iş Güncelle 
  {
    öz->kök = öz->bitiş;
  }


  öz* t 
  sanal iş AyraçEkle 
  {
    i := öz->bitiş - 1; 
    durum öz->_dizi[i]: 
    {
      seçim ascii::Bölü: {} 
      varsayılan: 
        öz->_dizi[öz->bitiş] = ascii::Bölü; 
        öz->ayraçlar.Ekle(öz->bitiş); 
        öz->bitiş++;
        öz->_dizi[öz->bitiş] = 0_st8; 
    }
  }
 

  öz *t 
  küresel iş Yapılandır _yol *t8 : *t
  {
    öz->_dizi = yeni(t8[4096]); 
    i     :=0; 
    ayraç := 0;
    öz->ayraçlar.Yapılandır(16);
    her; _yol[i]; i++:
    {
      eğer _yol[i] == ascii::Bölü: 
      {
        öz->ayraçlar.Ekle(i);
        ayraç = i;
      }
    } 
    str::strncpy(öz->_dizi, _yol, 4096);
    öz->bitiş    = i; 
    öz->_dizi[i] = 37;
    öz->kök      = ayraç;
    öz->AyraçEkle();
    dön öz;
  }
  

  Yol *t 
  küresel iş 
  DalÇıkar 
  {
    ie := Yol->ayraçlar.Çıkar();
    Yol->bitiş = ie;
    Yol->_dizi[ie] = 0;
  }

  öz* t 
  küresel iş DalEkle _dal *t8
  {
    öz->AyraçEkle(); 
    boyut := str::strlen(_dal); 
    str::strncpy(&öz->_dizi[öz->bitiş], _dal, boyut);
    öz->bitiş += <tam>boyut;
    öz->_dizi[öz->bitiş] = 0;
  }
  Yol *t 
  küresel iş UzantıEkle _uzantı *metin 
  {
    str::strncpy(&Yol->_dizi[Yol->bitiş], _uzantı->_harfler, _uzantı->boyut); 
    Yol->bitiş += _uzantı->boyut; 
    Yol->_dizi[Yol->bitiş] = 0;    
  }
  
  öz *t 
  sanal iş Temizle
  {
    öz->ayraçlar.Temizle();
    sil öz->_dizi;
  }

  Yol *t 
  sanal iş Sil
  {
    Yol->Temizle();
    sil Yol; 
  }

  öz *t 
  sanal iş Yazdır 
  {
    stdio::printf('yol: %s\n  kök : %d\n  bitiş: %d\n',
      öz->_dizi, 
      öz->kök, 
      öz->bitiş); 
  }

  iş gezi Nesne *tam:
  {
    stdio::printf('--> %d\n', *Nesne);
  }
  
  Yol *t 
  küresel iş DosyaYarat : tam 
  { 
    değer stat sys::stat_t = {};
    lstat := sys::lstat(Yol->_dizi, &stat);   
    //i::Yaz("----------------- %d\n", <tam>Yol->_dizi[Yol->bitiş-1]);
    eğer lstat < 0: 
    {
      no := error::no(); 
      eğer no == error::code::Entry: 
      {
        tamam := sys::mkdir(Yol->_dizi, 0o777); 
        //stdio::printf('--> %d\n', tamam);
        eğer tamam < 0: 
        {
          no = error::no(); 
          stdio::perror('neden ki ?');
          stdio::printf('hatalı dosya yolu[%d:%d] : %s\n', 
            tamam, 
            no,
            Yol->_dizi); 
          
        }
        dön Dönüş::Sorunsuz;
      }
      değilse:
      {
        stdio::printf('--oldu mu ?\n');
      }
    }
    değilse:
    {
      //stdio::printf('allah \n'); 
      dön Dönüş::DosyaZatenVar;
    }
  }

  Yol *t 
  küresel iş Dal : *t8 
  {
    s := Yol->ayraçlar->boyut -1;
    konum := Yol->ayraçlar->Nesneler[s] +1;
    dön &Yol->_dizi[konum];
  }

  Yol *t 
  küresel iş Uzantı : *t8 
  {
    _dal := Yol->Dal();
    _uzantı := str::strrchr(_dal, merkez::ascii::Nokta);
    dön _uzantı;
  }

  küresel iş Yeni _yol *t8 : *t 
  {
    Yol := yeni(t);  
    dön Yol->Yapılandır(_yol);
  } 
}