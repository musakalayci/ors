dahili c::stdarg; 
dahili c::stdio;
dahili renk::ascii: renk;

Metin metin 
bağımsız küresel iş Yeni hacim t32: *metin 
{
  hacim++;
  tamlanmış := hacim + (@mimari - (hacim % @mimari));
  toplam := tamlanmış + @metin;
  Gelen := temiz(t8[toplam]);
  //c::stdio::printf('toplam: %d, hacim: %d, tamlanmış %d\n', toplam, hacim, tamlanmış); 
  Metin := <*metin>Gelen;
  Metin->hacim = tamlanmış;
  Metin->boyut = 0;
  Metin->_harfler = &Gelen[@metin];
  dön Metin;
}

sanal iş _dboyut Sol *metin, Sağ *metin : tam 
{
  dön (seç Sol->hacim > Sağ->hacim: 
    hayır: Sol->hacim/<%Sol->hacim>(@mimari), 
    varsayılan: Sağ->hacim/<%Sol->hacim>(@mimari)); 
}

Metin *metin 
küresel iş Aynı Girdi *metin : eh 
{
  eğer Metin->boyut != Girdi->boyut:
  {
    dön hayır;}
  Kaynak := <*mimari>(&Metin->_harfler[0]);
  Hedef  := <*mimari>(&Girdi->_harfler[0]);
  dBoyut := _dboyut(Metin, Girdi); 
  her i := 0; i < dBoyut; i++:
  {
    eğer Kaynak[i] != Hedef[i]:
      dön hayır;
  }
  dön evet;
} 

Metin *metin 
küresel iş Geçir Girdi *metin: eh
{
  eğer Metin->hacim <= Girdi->boyut:
    dön hayır;
  Kaynak := <*mimari>(&Metin->_harfler[0]);
  Hedef  := <*mimari>(&Girdi->_harfler[0]);
  dBoyut := _dboyut(Metin, Girdi);
  her i := 0; i < dBoyut; i++:
  {
    Kaynak[i] = Hedef[i];
  }
  Metin->boyut = Girdi->boyut;
  dön evet;
}

Metin *metin 
iş Döküm Belge *c::stdio::FILE : tam 
{
  dön c::stdio::fprintf(Belge, 'boyut %d, hacim %d -%s-\n', 
    Metin->boyut, 
    Metin->hacim,
    Metin->_harfler);
}

Metin *metin 
küresel iş Ekle Girdi *metin: *metin
{
  kalan := Metin->hacim - Metin->boyut; 

  eğer kalan > Girdi->boyut:
  {
    geçir(&Metin->_harfler[Metin->boyut], Girdi->_harfler, Girdi->boyut); 
    Metin->boyut += Girdi->boyut;
    dön Metin;
  }
  dön boş;
}

Metin metin 
küresel bağımsız iş 
Bellekten Bellek *bellek::t: *metin 
{
  Yeni := metin::Yeni(Bellek->sıra+1);
  geçir(Yeni->_harfler, &Bellek->_veri[0], Bellek->sıra); 
  Yeni->boyut = Bellek->sıra;
  dön Yeni;
}

Metin metin 
bağımsız küresel 
iş Harflerden _harfler *t8: *metin 
{
  boyut := c::str::strlen(_harfler);
  Yeni := metin::Yeni(boyut+1); 
  Yeni->boyut = boyut;
  geçir(Yeni->_harfler, _harfler, boyut); 
  dön Yeni;
}

Metin metin 
bağımsız küresel 
iş Metinden Girdi *metin: *metin 
{
  Yeni := metin::Yeni(Girdi->boyut);
  _harfler := &Girdi->_harfler[0];
  geçir(&Yeni->_harfler[0], _harfler, Girdi->boyut); 
  Yeni->boyut = Girdi->boyut; 
  //stdio::printf('-?? %s, %s\n', Yeni->_harfler, _harfler);
  dön Yeni;
}



Metin metin 
bağımsız küresel iş 
Belgeden Yol *yol::t : *metin 
{
  izin := 0600;
  belge := c::sys::open(Yol->_dizi, c::sys::AçışIzinleri::RDWR, izin); 
  eğer belge < 0: 
    dön boş;
  değer stat c::sys::stat_t; 
  d := c::sys::fstat(belge, &stat); 
  eğer d < 0: 
    dön boş;
  Yeni := metin::Yeni(stat.st_size+1);
  d = c::unistd::read(belge, Yeni->_harfler, stat.st_size); 
  eğer d > 0: 
    Yeni->boyut = <%Yeni->boyut>stat.st_size;
  c::unistd::close(belge);
  dön Yeni;
}

Metin *metin 
iş Ikile : *metin 
{
  Yeni := metin::Yeni(Metin->hacim);
  Yeni->Ekle(Metin);
  dön Yeni;
}

Metin *metin 
iş fark : tam 
{
  dön (Metin->hacim - Metin->boyut);
}

Metin *metin 
küresel iş Yaz Biçim *metin, _argümanlar ... : tam
{
  fark := Metin->fark();
  eğer fark > Biçim->boyut: 
  {
    _biçim := Biçim->_harfler;
    stdarg::va_start(_argümanlar);
    gelen := stdio::vsnprintf(&Metin->_harfler[Metin->boyut], fark, _biçim, _argümanlar);
    stdarg::va_end(_argümanlar);
    Metin->boyut += gelen;
    dön Metin->boyut;
  }
  dön 0;
}

Metin *metin 
küresel iş Sil =>
  eğer (Metin):
    sil Metin;




uygulamalı tür metinDizisi dizi::k'*metin; 

tür metinler 
{
  genişlik mimari; 
  boyut    mimari;
  dizi     metinDizisi;
}

Metinler *metinler 
küresel iş Yapılandır genişlik mimari 
{
  Metinler->genişlik = genişlik;
  Metinler->dizi.Yapılandır(16);
  İlk := metin::Yeni(genişlik);
  Metinler->dizi.Ekle(İlk);
}

Metinler *metinler 
küresel iş Temizle 
{
  eğer Metinler->genişlik: 
  {
    değer Metin *metin = boş;
    her i := 0; i < Metinler->dizi.boyut; i++: 
    {
      Metin = Metinler->dizi.Nesneler[i]; 
      eğer Metin: 
      {
        sil Metin;
      }
    } 
    Metinler->dizi.Temizle();
  }
}

Metinler *metinler 
küresel iş Çıktı belge tam : tam 
{
  değer Metin *metin = boş;
  her i := 0; i < Metinler->dizi.boyut; i++: 
  {
    Metin = Metinler->dizi.Nesneler[i]; 
    eğer Metin->boyut: 
    {
      c::unistd::write(belge, Metin->_harfler, Metin->boyut);
    }
  }
  dön 1;
}

Metinler *metinler 
küresel iş Yaz Biçim *metin, _argümanlar ... : *metin 
{
  eğer !Metinler:
    dön boş;
  eğer Metinler->dizi.boyut == 0:
    dön boş;
  geçildiMi := hayır;
  Metin     := Metinler->dizi.Son(); 
  sınır     := 0;
  eğer Metin: 
  {
    sınır = Metin->fark();
    eğer sınır <= 256:
    {
      //bu sınır çok fazla
      YeniMetin := metin::Yeni(Metinler->genişlik);
      Metinler->dizi.Ekle(YeniMetin);
      Metin = YeniMetin;
      sınır = Metin->fark();
    }
  }
  değilse: dön boş;

  _biçim := Biçim->_harfler;
  stdarg::va_start(_argümanlar);
  gelen := stdio::vsnprintf(
    &Metin->_harfler[Metin->boyut], 
    sınır, 
    _biçim, 
    _argümanlar);
  stdarg::va_end(_argümanlar);
  Metin->boyut += gelen; 
  Metinler->boyut += gelen;
  
  dön Metin;
}