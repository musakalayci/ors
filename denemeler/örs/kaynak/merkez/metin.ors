
Metin metin 
bağımsız küresel iş Yeni hacim t32: *metin 
{
  toplam := hacim + @metin;
  Gelen := temiz(t8[toplam]);
 // c::stdio::printf('toplam: %d\n', toplam); 
  Metin := <*metin>Gelen;
  Metin->hacim = hacim;
  Metin->boyut = 0;
  Metin->_harfler = &Gelen[@metin];
  dön Metin;
}



Metin *metin 
iş Döküm Belge *c::stdio::FILE : tam 
{
  dön c::stdio::fprintf(Belge, 'boyut %d, hacim %d -%s-\n', 
    Metin->boyut, 
    Metin->hacim,
    Metin->_harfler);
}

Metin *metin 
iş Ekle Girdi *metin: *metin
{
  kalan := Metin->hacim - Metin->boyut; 

  eğer kalan > Girdi->boyut:
  {
    geçir(&Metin->_harfler[Metin->boyut], Girdi->_harfler, Girdi->boyut); 
    Metin->boyut += Girdi->boyut;
    dön Metin;
  }
  dön boş;
}

Metin metin 
küresel bağımsız iş 
Bellekten Bellek *bellek::t: *metin 
{
  Yeni := metin::Yeni(Bellek->sıra+1);
  geçir(Yeni->_harfler, &Bellek->_veri[0], Bellek->sıra); 
  dön Yeni;
}

Metin metin 
bağımsız küresel 
iş Harflerden _harfler *t8: *metin 
{
  boyut := c::str::strlen(_harfler);
  Yeni := metin::Yeni(boyut+1); 
  Yeni->boyut = boyut;
  geçir(Yeni->_harfler, _harfler, boyut); 
  dön Yeni;
}

Metin metin 
bağımsız küresel 
iş Metinden Girdi *metin: *metin 
{
  Yeni := metin::Yeni(Girdi->hacim);
  geçir(Yeni->_harfler, &Girdi->_harfler[0], Girdi->boyut);
  dön Yeni;
}



Metin metin 
bağımsız küresel iş 
Belgeden Yol *yol::t : *metin 
{
  izin := 0600;
  belge := c::sys::open(Yol->_dizi, c::sys::AçışIzinleri::RDWR, izin); 
  eğer belge < 0: 
    dön boş;
  değer stat c::sys::stat_t; 
  d := c::sys::fstat(belge, &stat); 
  eğer d < 0: 
    dön boş;
  Yeni := metin::Yeni(stat.st_size+1);
  d = c::unistd::read(belge, Yeni->_harfler, stat.st_size); 
  eğer d > 0: 
    Yeni->boyut = <%Yeni->boyut>stat.st_size;
  c::unistd::close(belge);
  dön Yeni;
}

Metin *metin 
iş Ikile : *metin 
{
  Yeni := metin::Yeni(Metin->hacim);
  Yeni->Ekle(Metin);
  dön Yeni;
}

Metin *metin 
küresel iş Sil =>
  eğer (Metin):
    sil Metin;