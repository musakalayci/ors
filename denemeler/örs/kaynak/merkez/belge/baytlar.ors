
tür baytlar
{
  boyut   t64;
  Dizi   *t8;
  _konum *t8;
}

öz *baytlar
küresel iş Yapılandır _konum *t8 : t32
{
  değer t tam = 0o600;
  değer d t;
  hata := d.Aç(_konum, sys::AçışIzinleri::RDWR, 0o600);
 
  eğer hata  < 0:
  {
    stdio::printf('%s belgesi yok.\n', _konum);
    dön d;
  }
  değer stat sys::stat_t = {};
  eğer sys::fstat(d, &stat) != 0:
  {
    stdio::printf(
      '%s belgesinin ayrıntıları alınamıyor.\n',
    _konum);
    dön d;
  }
  //stdio::printf('boyut: %lu', stat.st_size);
  öz->boyut  = stat.st_size;
  _dizi  := temiz(t8[stat.st_size+1]); 
  öz->Dizi = _dizi;
  öz->_konum = _konum;
  unistd::read(
    d, öz->Dizi, öz->boyut);
  _dizi[öz->boyut] = 0_st8;
  unistd::close(d);
  dön 0;
}

öz *baytlar 
küresel iş Yazdır : t64 => 
  unistd::write(
    unistd::fileno::Stdout, 
    öz->Dizi, öz->boyut);

öz *baytlar 
küresel iş Temizle : tam 
{
  sil öz->Dizi;
}