dahili derleme;
dahili merkez::c::math;
dahili merkez::c::stdio; 
dahili merkez::c::stdarg;
dahili merkez::küme::sözlük;
dahili merkez::dizi;
dahili merkez::yol;
dahili merkez::küme::çizelge; 

tür ikili 
{
  a tam;
  b tam;
  M *metin;
}

//uygulamalı tür Iki dizi::k'*ikili;

/*
yapılacaklar:   

  -- ayıklama satırı ekle. mesela ayıklama yaparken derlenmesi 
    gereken satırlar son halinde istenmeye biliyor. ve çoğunlukla zaten testler vs. 
    yani özelleştirme.örs'de ayıklama açıldığında bu satırlar derlenecek, 
    öteki türlü derlenmeyecek. 
      mesela ayıklama: {stdio::printf('birşeyler');} 
      gibi. 

  -- sanal dönüşlerinde yükleme. çağıran yüklesin. 
  geçici olarak çözüm buldum. Örsü örste yazarken hatırla.
    
  -- tür derlemelerinde, arama ifadesinde, derlenirken 
  eğer ifade bulunamazsa hata vermek yerine çöküyor. 
  onun tür bulunamadı diye hata vermesi lazım.

- ilk kaynak "giriş" ve Hafızasının bağlantısı yok. 
 - <<=, |= ^= gibi işlemler yok. çözümlemede bile yok. 
 
 - şimdi şöyle bir durum var. 
   hani derleyicide pek çok imge üretilirken tanımlanıp yazılıyor ya. 
   hah işte onu kavramlara ayır. ikisi beraber olmuyor. 
   ne demeye çalıştığımı anlamak için aklına 
   küresel değerler ve atıflar gelsin. 


 - hani sayaçlara küme ekleniyor ya. çok iyi. 
   sayaçlara ast sayaçlar da eklenebilsin. 
   çünkü çoğu zaman sayaçların anlamları ağaçlanıyor. 
   ve bu ağaçlanmanın da sayaç imgesine izdüşümü olması lazım. 

 - içi boş yada içinde .örs olmayan dosyaları da birim olarak derliyor. 
 - küresel bölgesel ayrımını hallet. 
 - çevirilerde sorun var. 
   mesela i32'yi i32ye çevirmemesi gerektiği halde çeviriyor. 
   özellikle 'getelemptr' komutunda.
 - işlem aritmetiği sorunlu. 
 - genişletilmiş asciiler ve utf8 karakterler sorunlu.
 - tam ve doğal yapıtaşlarına varsayılan bit işlemleri ekle.
 - döngü devam yönergesi sorunlu. yanlış yere zıplıyor. 
 - ayrıca = ifadesi eşitlenen dönmeyebiliyor. 
 - Gezme->Örsmü işlemindeki veya vb karşılaştırmalar sorunlu. 
*/

  yaban iş printf bicim *t8,  _argumanlar ... : tam;


değer sekme *t8 = 'sorun çözüldü';


iş Konumu : *t8 
{
  dön sekme;
}

sanal iş konumu : *t8
{
  dön Konumu();
}

iş Giriş 
  argümanSayısı   tam, 
  _argümanlar **t8: tam 
{
  değer argümanlar *t8[4] = [
    './', 
    '-d',
    './denemeler/imla',
  ]; 
  
  //derleme::hafıza::küme::Örnek();
  //derleme::hafıza::dizi::Örnek();
  sonuç := 6/2*(2+1);
  printf('---> sonuç %d dokuz olması lazım\n', sonuç);
  derleme::Başlat(3, argümanlar); 
    /*dd := 'musa kalaycı';
  kk := &dd[5];
  aa := kk + (-5);*/ 




  /*adım := metin::Harflerden('musa kalaycı');
  g1 := metin::Yeni(16);
  adım1 := metin::Harflerden('musa kalaycı');
  g1->Geçir(adım);
  stdio::printf('g1   : boyut: %d, hacim: %d, \'%s\'\n', g1->boyut, g1->hacim, g1->_harfler);
  stdio::printf('adım : boyut: %d, hacim: %d, \'%s\'\n', adım->boyut, adım->hacim, adım->_harfler);
  stdio::printf('adım1: boyut: %d, hacim: %d, \'%s\'\n', adım1->boyut, adım1->hacim, adım1->_harfler);
  
  eğer adım1->Aynı(adım):
  {
    stdio::printf('aynı\n');
  }
  sil adım1;
  sil adım;
  sil g1;*/
 // derleme::hafıza::Örnek();
}

